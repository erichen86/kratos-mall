// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type OmsHTTPServer interface {
	CartItemAdd(context.Context, *CartItemAddReq) (*CartItemAddResp, error)
	CartItemDelete(context.Context, *CartItemDeleteReq) (*CartItemDeleteResp, error)
	CartItemList(context.Context, *CartItemListReq) (*CartItemListResp, error)
	CartItemUpdate(context.Context, *CartItemUpdateReq) (*CartItemUpdateResp, error)
	CompanyAddressAdd(context.Context, *CompanyAddressAddReq) (*CompanyAddressAddResp, error)
	CompanyAddressDelete(context.Context, *CompanyAddressDeleteReq) (*CompanyAddressDeleteResp, error)
	CompanyAddressList(context.Context, *CompanyAddressListReq) (*CompanyAddressListResp, error)
	CompanyAddressUpdate(context.Context, *CompanyAddressUpdateReq) (*CompanyAddressUpdateResp, error)
	OrderAdd(context.Context, *OrderAddReq) (*OrderAddResp, error)
	OrderDelete(context.Context, *OrderDeleteReq) (*OrderDeleteResp, error)
	OrderList(context.Context, *OrderListReq) (*OrderListResp, error)
	OrderOperateHistoryAdd(context.Context, *OrderOperateHistoryAddReq) (*OrderOperateHistoryAddResp, error)
	OrderOperateHistoryDelete(context.Context, *OrderOperateHistoryDeleteReq) (*OrderOperateHistoryDeleteResp, error)
	OrderOperateHistoryList(context.Context, *OrderOperateHistoryListReq) (*OrderOperateHistoryListResp, error)
	OrderOperateHistoryUpdate(context.Context, *OrderOperateHistoryUpdateReq) (*OrderOperateHistoryUpdateResp, error)
	OrderReturnApplyAdd(context.Context, *OrderReturnApplyAddReq) (*OrderReturnApplyAddResp, error)
	OrderReturnApplyDelete(context.Context, *OrderReturnApplyDeleteReq) (*OrderReturnApplyDeleteResp, error)
	OrderReturnApplyList(context.Context, *OrderReturnApplyListReq) (*OrderReturnApplyListResp, error)
	OrderReturnApplyUpdate(context.Context, *OrderReturnApplyUpdateReq) (*OrderReturnApplyUpdateResp, error)
	OrderReturnReasonAdd(context.Context, *OrderReturnReasonAddReq) (*OrderReturnReasonAddResp, error)
	OrderReturnReasonDelete(context.Context, *OrderReturnReasonDeleteReq) (*OrderReturnReasonDeleteResp, error)
	OrderReturnReasonList(context.Context, *OrderReturnReasonListReq) (*OrderReturnReasonListResp, error)
	OrderReturnReasonUpdate(context.Context, *OrderReturnReasonUpdateReq) (*OrderReturnReasonUpdateResp, error)
	OrderSettingAdd(context.Context, *OrderSettingAddReq) (*OrderSettingAddResp, error)
	OrderSettingDelete(context.Context, *OrderSettingDeleteReq) (*OrderSettingDeleteResp, error)
	OrderSettingList(context.Context, *OrderSettingListReq) (*OrderSettingListResp, error)
	OrderSettingUpdate(context.Context, *OrderSettingUpdateReq) (*OrderSettingUpdateResp, error)
	OrderUpdate(context.Context, *OrderUpdateReq) (*OrderUpdateResp, error)
}

func RegisterOmsHTTPServer(s *http.Server, srv OmsHTTPServer) {
	r := s.Route("/")
	r.POST("/api/order/order/add", _Oms_OrderAdd0_HTTP_Handler(srv))
	r.POST("/api/order/order/list", _Oms_OrderList0_HTTP_Handler(srv))
	r.POST("/api/order/order/update", _Oms_OrderUpdate0_HTTP_Handler(srv))
	r.POST("/api/order/order/delete", _Oms_OrderDelete0_HTTP_Handler(srv))
	r.POST("/api/order/cart/add", _Oms_CartItemAdd0_HTTP_Handler(srv))
	r.POST("/api/order/cart/list", _Oms_CartItemList0_HTTP_Handler(srv))
	r.POST("/api/order/cart/update", _Oms_CartItemUpdate0_HTTP_Handler(srv))
	r.POST("/api/order/cart/delete", _Oms_CartItemDelete0_HTTP_Handler(srv))
	r.POST("/api/order/compayaddress/add", _Oms_CompanyAddressAdd0_HTTP_Handler(srv))
	r.POST("/api/order/compayaddress/list", _Oms_CompanyAddressList0_HTTP_Handler(srv))
	r.POST("/api/order/compayaddress/update", _Oms_CompanyAddressUpdate0_HTTP_Handler(srv))
	r.POST("/api/order/compayaddress/delete", _Oms_CompanyAddressDelete0_HTTP_Handler(srv))
	r.POST("/api/order/operatehistory/add", _Oms_OrderOperateHistoryAdd0_HTTP_Handler(srv))
	r.POST("/api/order/operatehistory/list", _Oms_OrderOperateHistoryList0_HTTP_Handler(srv))
	r.POST("/api/order/operatehistory/update", _Oms_OrderOperateHistoryUpdate0_HTTP_Handler(srv))
	r.POST("/api/order/operatehistory/delete", _Oms_OrderOperateHistoryDelete0_HTTP_Handler(srv))
	r.POST("/api/order/returnapply/add", _Oms_OrderReturnApplyAdd0_HTTP_Handler(srv))
	r.POST("/api/order/returnapply/list", _Oms_OrderReturnApplyList0_HTTP_Handler(srv))
	r.POST("/api/order/returnapply/update", _Oms_OrderReturnApplyUpdate0_HTTP_Handler(srv))
	r.POST("/api/order/returnapply/delete", _Oms_OrderReturnApplyDelete0_HTTP_Handler(srv))
	r.POST("/api/order/returnreason/add", _Oms_OrderReturnReasonAdd0_HTTP_Handler(srv))
	r.POST("/api/order/returnreason/list", _Oms_OrderReturnReasonList0_HTTP_Handler(srv))
	r.POST("/api/order/returnreason/update", _Oms_OrderReturnReasonUpdate0_HTTP_Handler(srv))
	r.POST("/api/order/returnreason/delete", _Oms_OrderReturnReasonDelete0_HTTP_Handler(srv))
	r.POST("/api/order/setting/add", _Oms_OrderSettingAdd0_HTTP_Handler(srv))
	r.POST("/api/order/setting/list", _Oms_OrderSettingList0_HTTP_Handler(srv))
	r.POST("/api/order/setting/update", _Oms_OrderSettingUpdate0_HTTP_Handler(srv))
	r.POST("/api/order/setting/delete", _Oms_OrderSettingDelete0_HTTP_Handler(srv))
}

func _Oms_OrderAdd0_HTTP_Handler(srv OmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Oms/OrderAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OrderAdd(ctx, req.(*OrderAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderAddResp)
		return ctx.Result(200, reply)
	}
}

func _Oms_OrderList0_HTTP_Handler(srv OmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Oms/OrderList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OrderList(ctx, req.(*OrderListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderListResp)
		return ctx.Result(200, reply)
	}
}

func _Oms_OrderUpdate0_HTTP_Handler(srv OmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Oms/OrderUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OrderUpdate(ctx, req.(*OrderUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Oms_OrderDelete0_HTTP_Handler(srv OmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Oms/OrderDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OrderDelete(ctx, req.(*OrderDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Oms_CartItemAdd0_HTTP_Handler(srv OmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CartItemAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Oms/CartItemAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CartItemAdd(ctx, req.(*CartItemAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CartItemAddResp)
		return ctx.Result(200, reply)
	}
}

func _Oms_CartItemList0_HTTP_Handler(srv OmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CartItemListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Oms/CartItemList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CartItemList(ctx, req.(*CartItemListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CartItemListResp)
		return ctx.Result(200, reply)
	}
}

func _Oms_CartItemUpdate0_HTTP_Handler(srv OmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CartItemUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Oms/CartItemUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CartItemUpdate(ctx, req.(*CartItemUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CartItemUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Oms_CartItemDelete0_HTTP_Handler(srv OmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CartItemDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Oms/CartItemDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CartItemDelete(ctx, req.(*CartItemDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CartItemDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Oms_CompanyAddressAdd0_HTTP_Handler(srv OmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CompanyAddressAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Oms/CompanyAddressAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CompanyAddressAdd(ctx, req.(*CompanyAddressAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CompanyAddressAddResp)
		return ctx.Result(200, reply)
	}
}

func _Oms_CompanyAddressList0_HTTP_Handler(srv OmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CompanyAddressListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Oms/CompanyAddressList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CompanyAddressList(ctx, req.(*CompanyAddressListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CompanyAddressListResp)
		return ctx.Result(200, reply)
	}
}

func _Oms_CompanyAddressUpdate0_HTTP_Handler(srv OmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CompanyAddressUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Oms/CompanyAddressUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CompanyAddressUpdate(ctx, req.(*CompanyAddressUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CompanyAddressUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Oms_CompanyAddressDelete0_HTTP_Handler(srv OmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CompanyAddressDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Oms/CompanyAddressDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CompanyAddressDelete(ctx, req.(*CompanyAddressDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CompanyAddressDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Oms_OrderOperateHistoryAdd0_HTTP_Handler(srv OmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderOperateHistoryAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Oms/OrderOperateHistoryAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OrderOperateHistoryAdd(ctx, req.(*OrderOperateHistoryAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderOperateHistoryAddResp)
		return ctx.Result(200, reply)
	}
}

func _Oms_OrderOperateHistoryList0_HTTP_Handler(srv OmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderOperateHistoryListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Oms/OrderOperateHistoryList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OrderOperateHistoryList(ctx, req.(*OrderOperateHistoryListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderOperateHistoryListResp)
		return ctx.Result(200, reply)
	}
}

func _Oms_OrderOperateHistoryUpdate0_HTTP_Handler(srv OmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderOperateHistoryUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Oms/OrderOperateHistoryUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OrderOperateHistoryUpdate(ctx, req.(*OrderOperateHistoryUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderOperateHistoryUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Oms_OrderOperateHistoryDelete0_HTTP_Handler(srv OmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderOperateHistoryDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Oms/OrderOperateHistoryDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OrderOperateHistoryDelete(ctx, req.(*OrderOperateHistoryDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderOperateHistoryDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Oms_OrderReturnApplyAdd0_HTTP_Handler(srv OmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderReturnApplyAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Oms/OrderReturnApplyAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OrderReturnApplyAdd(ctx, req.(*OrderReturnApplyAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderReturnApplyAddResp)
		return ctx.Result(200, reply)
	}
}

func _Oms_OrderReturnApplyList0_HTTP_Handler(srv OmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderReturnApplyListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Oms/OrderReturnApplyList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OrderReturnApplyList(ctx, req.(*OrderReturnApplyListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderReturnApplyListResp)
		return ctx.Result(200, reply)
	}
}

func _Oms_OrderReturnApplyUpdate0_HTTP_Handler(srv OmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderReturnApplyUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Oms/OrderReturnApplyUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OrderReturnApplyUpdate(ctx, req.(*OrderReturnApplyUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderReturnApplyUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Oms_OrderReturnApplyDelete0_HTTP_Handler(srv OmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderReturnApplyDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Oms/OrderReturnApplyDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OrderReturnApplyDelete(ctx, req.(*OrderReturnApplyDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderReturnApplyDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Oms_OrderReturnReasonAdd0_HTTP_Handler(srv OmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderReturnReasonAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Oms/OrderReturnReasonAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OrderReturnReasonAdd(ctx, req.(*OrderReturnReasonAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderReturnReasonAddResp)
		return ctx.Result(200, reply)
	}
}

func _Oms_OrderReturnReasonList0_HTTP_Handler(srv OmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderReturnReasonListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Oms/OrderReturnReasonList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OrderReturnReasonList(ctx, req.(*OrderReturnReasonListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderReturnReasonListResp)
		return ctx.Result(200, reply)
	}
}

func _Oms_OrderReturnReasonUpdate0_HTTP_Handler(srv OmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderReturnReasonUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Oms/OrderReturnReasonUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OrderReturnReasonUpdate(ctx, req.(*OrderReturnReasonUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderReturnReasonUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Oms_OrderReturnReasonDelete0_HTTP_Handler(srv OmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderReturnReasonDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Oms/OrderReturnReasonDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OrderReturnReasonDelete(ctx, req.(*OrderReturnReasonDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderReturnReasonDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Oms_OrderSettingAdd0_HTTP_Handler(srv OmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderSettingAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Oms/OrderSettingAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OrderSettingAdd(ctx, req.(*OrderSettingAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderSettingAddResp)
		return ctx.Result(200, reply)
	}
}

func _Oms_OrderSettingList0_HTTP_Handler(srv OmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderSettingListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Oms/OrderSettingList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OrderSettingList(ctx, req.(*OrderSettingListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderSettingListResp)
		return ctx.Result(200, reply)
	}
}

func _Oms_OrderSettingUpdate0_HTTP_Handler(srv OmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderSettingUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Oms/OrderSettingUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OrderSettingUpdate(ctx, req.(*OrderSettingUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderSettingUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Oms_OrderSettingDelete0_HTTP_Handler(srv OmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderSettingDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Oms/OrderSettingDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OrderSettingDelete(ctx, req.(*OrderSettingDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderSettingDeleteResp)
		return ctx.Result(200, reply)
	}
}

type OmsHTTPClient interface {
	CartItemAdd(ctx context.Context, req *CartItemAddReq, opts ...http.CallOption) (rsp *CartItemAddResp, err error)
	CartItemDelete(ctx context.Context, req *CartItemDeleteReq, opts ...http.CallOption) (rsp *CartItemDeleteResp, err error)
	CartItemList(ctx context.Context, req *CartItemListReq, opts ...http.CallOption) (rsp *CartItemListResp, err error)
	CartItemUpdate(ctx context.Context, req *CartItemUpdateReq, opts ...http.CallOption) (rsp *CartItemUpdateResp, err error)
	CompanyAddressAdd(ctx context.Context, req *CompanyAddressAddReq, opts ...http.CallOption) (rsp *CompanyAddressAddResp, err error)
	CompanyAddressDelete(ctx context.Context, req *CompanyAddressDeleteReq, opts ...http.CallOption) (rsp *CompanyAddressDeleteResp, err error)
	CompanyAddressList(ctx context.Context, req *CompanyAddressListReq, opts ...http.CallOption) (rsp *CompanyAddressListResp, err error)
	CompanyAddressUpdate(ctx context.Context, req *CompanyAddressUpdateReq, opts ...http.CallOption) (rsp *CompanyAddressUpdateResp, err error)
	OrderAdd(ctx context.Context, req *OrderAddReq, opts ...http.CallOption) (rsp *OrderAddResp, err error)
	OrderDelete(ctx context.Context, req *OrderDeleteReq, opts ...http.CallOption) (rsp *OrderDeleteResp, err error)
	OrderList(ctx context.Context, req *OrderListReq, opts ...http.CallOption) (rsp *OrderListResp, err error)
	OrderOperateHistoryAdd(ctx context.Context, req *OrderOperateHistoryAddReq, opts ...http.CallOption) (rsp *OrderOperateHistoryAddResp, err error)
	OrderOperateHistoryDelete(ctx context.Context, req *OrderOperateHistoryDeleteReq, opts ...http.CallOption) (rsp *OrderOperateHistoryDeleteResp, err error)
	OrderOperateHistoryList(ctx context.Context, req *OrderOperateHistoryListReq, opts ...http.CallOption) (rsp *OrderOperateHistoryListResp, err error)
	OrderOperateHistoryUpdate(ctx context.Context, req *OrderOperateHistoryUpdateReq, opts ...http.CallOption) (rsp *OrderOperateHistoryUpdateResp, err error)
	OrderReturnApplyAdd(ctx context.Context, req *OrderReturnApplyAddReq, opts ...http.CallOption) (rsp *OrderReturnApplyAddResp, err error)
	OrderReturnApplyDelete(ctx context.Context, req *OrderReturnApplyDeleteReq, opts ...http.CallOption) (rsp *OrderReturnApplyDeleteResp, err error)
	OrderReturnApplyList(ctx context.Context, req *OrderReturnApplyListReq, opts ...http.CallOption) (rsp *OrderReturnApplyListResp, err error)
	OrderReturnApplyUpdate(ctx context.Context, req *OrderReturnApplyUpdateReq, opts ...http.CallOption) (rsp *OrderReturnApplyUpdateResp, err error)
	OrderReturnReasonAdd(ctx context.Context, req *OrderReturnReasonAddReq, opts ...http.CallOption) (rsp *OrderReturnReasonAddResp, err error)
	OrderReturnReasonDelete(ctx context.Context, req *OrderReturnReasonDeleteReq, opts ...http.CallOption) (rsp *OrderReturnReasonDeleteResp, err error)
	OrderReturnReasonList(ctx context.Context, req *OrderReturnReasonListReq, opts ...http.CallOption) (rsp *OrderReturnReasonListResp, err error)
	OrderReturnReasonUpdate(ctx context.Context, req *OrderReturnReasonUpdateReq, opts ...http.CallOption) (rsp *OrderReturnReasonUpdateResp, err error)
	OrderSettingAdd(ctx context.Context, req *OrderSettingAddReq, opts ...http.CallOption) (rsp *OrderSettingAddResp, err error)
	OrderSettingDelete(ctx context.Context, req *OrderSettingDeleteReq, opts ...http.CallOption) (rsp *OrderSettingDeleteResp, err error)
	OrderSettingList(ctx context.Context, req *OrderSettingListReq, opts ...http.CallOption) (rsp *OrderSettingListResp, err error)
	OrderSettingUpdate(ctx context.Context, req *OrderSettingUpdateReq, opts ...http.CallOption) (rsp *OrderSettingUpdateResp, err error)
	OrderUpdate(ctx context.Context, req *OrderUpdateReq, opts ...http.CallOption) (rsp *OrderUpdateResp, err error)
}

type OmsHTTPClientImpl struct {
	cc *http.Client
}

func NewOmsHTTPClient(client *http.Client) OmsHTTPClient {
	return &OmsHTTPClientImpl{client}
}

func (c *OmsHTTPClientImpl) CartItemAdd(ctx context.Context, in *CartItemAddReq, opts ...http.CallOption) (*CartItemAddResp, error) {
	var out CartItemAddResp
	pattern := "/api/order/cart/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Oms/CartItemAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OmsHTTPClientImpl) CartItemDelete(ctx context.Context, in *CartItemDeleteReq, opts ...http.CallOption) (*CartItemDeleteResp, error) {
	var out CartItemDeleteResp
	pattern := "/api/order/cart/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Oms/CartItemDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OmsHTTPClientImpl) CartItemList(ctx context.Context, in *CartItemListReq, opts ...http.CallOption) (*CartItemListResp, error) {
	var out CartItemListResp
	pattern := "/api/order/cart/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Oms/CartItemList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OmsHTTPClientImpl) CartItemUpdate(ctx context.Context, in *CartItemUpdateReq, opts ...http.CallOption) (*CartItemUpdateResp, error) {
	var out CartItemUpdateResp
	pattern := "/api/order/cart/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Oms/CartItemUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OmsHTTPClientImpl) CompanyAddressAdd(ctx context.Context, in *CompanyAddressAddReq, opts ...http.CallOption) (*CompanyAddressAddResp, error) {
	var out CompanyAddressAddResp
	pattern := "/api/order/compayaddress/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Oms/CompanyAddressAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OmsHTTPClientImpl) CompanyAddressDelete(ctx context.Context, in *CompanyAddressDeleteReq, opts ...http.CallOption) (*CompanyAddressDeleteResp, error) {
	var out CompanyAddressDeleteResp
	pattern := "/api/order/compayaddress/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Oms/CompanyAddressDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OmsHTTPClientImpl) CompanyAddressList(ctx context.Context, in *CompanyAddressListReq, opts ...http.CallOption) (*CompanyAddressListResp, error) {
	var out CompanyAddressListResp
	pattern := "/api/order/compayaddress/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Oms/CompanyAddressList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OmsHTTPClientImpl) CompanyAddressUpdate(ctx context.Context, in *CompanyAddressUpdateReq, opts ...http.CallOption) (*CompanyAddressUpdateResp, error) {
	var out CompanyAddressUpdateResp
	pattern := "/api/order/compayaddress/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Oms/CompanyAddressUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OmsHTTPClientImpl) OrderAdd(ctx context.Context, in *OrderAddReq, opts ...http.CallOption) (*OrderAddResp, error) {
	var out OrderAddResp
	pattern := "/api/order/order/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Oms/OrderAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OmsHTTPClientImpl) OrderDelete(ctx context.Context, in *OrderDeleteReq, opts ...http.CallOption) (*OrderDeleteResp, error) {
	var out OrderDeleteResp
	pattern := "/api/order/order/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Oms/OrderDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OmsHTTPClientImpl) OrderList(ctx context.Context, in *OrderListReq, opts ...http.CallOption) (*OrderListResp, error) {
	var out OrderListResp
	pattern := "/api/order/order/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Oms/OrderList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OmsHTTPClientImpl) OrderOperateHistoryAdd(ctx context.Context, in *OrderOperateHistoryAddReq, opts ...http.CallOption) (*OrderOperateHistoryAddResp, error) {
	var out OrderOperateHistoryAddResp
	pattern := "/api/order/operatehistory/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Oms/OrderOperateHistoryAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OmsHTTPClientImpl) OrderOperateHistoryDelete(ctx context.Context, in *OrderOperateHistoryDeleteReq, opts ...http.CallOption) (*OrderOperateHistoryDeleteResp, error) {
	var out OrderOperateHistoryDeleteResp
	pattern := "/api/order/operatehistory/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Oms/OrderOperateHistoryDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OmsHTTPClientImpl) OrderOperateHistoryList(ctx context.Context, in *OrderOperateHistoryListReq, opts ...http.CallOption) (*OrderOperateHistoryListResp, error) {
	var out OrderOperateHistoryListResp
	pattern := "/api/order/operatehistory/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Oms/OrderOperateHistoryList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OmsHTTPClientImpl) OrderOperateHistoryUpdate(ctx context.Context, in *OrderOperateHistoryUpdateReq, opts ...http.CallOption) (*OrderOperateHistoryUpdateResp, error) {
	var out OrderOperateHistoryUpdateResp
	pattern := "/api/order/operatehistory/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Oms/OrderOperateHistoryUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OmsHTTPClientImpl) OrderReturnApplyAdd(ctx context.Context, in *OrderReturnApplyAddReq, opts ...http.CallOption) (*OrderReturnApplyAddResp, error) {
	var out OrderReturnApplyAddResp
	pattern := "/api/order/returnapply/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Oms/OrderReturnApplyAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OmsHTTPClientImpl) OrderReturnApplyDelete(ctx context.Context, in *OrderReturnApplyDeleteReq, opts ...http.CallOption) (*OrderReturnApplyDeleteResp, error) {
	var out OrderReturnApplyDeleteResp
	pattern := "/api/order/returnapply/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Oms/OrderReturnApplyDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OmsHTTPClientImpl) OrderReturnApplyList(ctx context.Context, in *OrderReturnApplyListReq, opts ...http.CallOption) (*OrderReturnApplyListResp, error) {
	var out OrderReturnApplyListResp
	pattern := "/api/order/returnapply/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Oms/OrderReturnApplyList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OmsHTTPClientImpl) OrderReturnApplyUpdate(ctx context.Context, in *OrderReturnApplyUpdateReq, opts ...http.CallOption) (*OrderReturnApplyUpdateResp, error) {
	var out OrderReturnApplyUpdateResp
	pattern := "/api/order/returnapply/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Oms/OrderReturnApplyUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OmsHTTPClientImpl) OrderReturnReasonAdd(ctx context.Context, in *OrderReturnReasonAddReq, opts ...http.CallOption) (*OrderReturnReasonAddResp, error) {
	var out OrderReturnReasonAddResp
	pattern := "/api/order/returnreason/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Oms/OrderReturnReasonAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OmsHTTPClientImpl) OrderReturnReasonDelete(ctx context.Context, in *OrderReturnReasonDeleteReq, opts ...http.CallOption) (*OrderReturnReasonDeleteResp, error) {
	var out OrderReturnReasonDeleteResp
	pattern := "/api/order/returnreason/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Oms/OrderReturnReasonDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OmsHTTPClientImpl) OrderReturnReasonList(ctx context.Context, in *OrderReturnReasonListReq, opts ...http.CallOption) (*OrderReturnReasonListResp, error) {
	var out OrderReturnReasonListResp
	pattern := "/api/order/returnreason/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Oms/OrderReturnReasonList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OmsHTTPClientImpl) OrderReturnReasonUpdate(ctx context.Context, in *OrderReturnReasonUpdateReq, opts ...http.CallOption) (*OrderReturnReasonUpdateResp, error) {
	var out OrderReturnReasonUpdateResp
	pattern := "/api/order/returnreason/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Oms/OrderReturnReasonUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OmsHTTPClientImpl) OrderSettingAdd(ctx context.Context, in *OrderSettingAddReq, opts ...http.CallOption) (*OrderSettingAddResp, error) {
	var out OrderSettingAddResp
	pattern := "/api/order/setting/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Oms/OrderSettingAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OmsHTTPClientImpl) OrderSettingDelete(ctx context.Context, in *OrderSettingDeleteReq, opts ...http.CallOption) (*OrderSettingDeleteResp, error) {
	var out OrderSettingDeleteResp
	pattern := "/api/order/setting/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Oms/OrderSettingDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OmsHTTPClientImpl) OrderSettingList(ctx context.Context, in *OrderSettingListReq, opts ...http.CallOption) (*OrderSettingListResp, error) {
	var out OrderSettingListResp
	pattern := "/api/order/setting/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Oms/OrderSettingList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OmsHTTPClientImpl) OrderSettingUpdate(ctx context.Context, in *OrderSettingUpdateReq, opts ...http.CallOption) (*OrderSettingUpdateResp, error) {
	var out OrderSettingUpdateResp
	pattern := "/api/order/setting/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Oms/OrderSettingUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OmsHTTPClientImpl) OrderUpdate(ctx context.Context, in *OrderUpdateReq, opts ...http.CallOption) (*OrderUpdateResp, error) {
	var out OrderUpdateResp
	pattern := "/api/order/order/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Oms/OrderUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
