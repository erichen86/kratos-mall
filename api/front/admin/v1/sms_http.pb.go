// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type SmsHTTPServer interface {
	CouponAdd(context.Context, *CouponAddReq) (*CouponAddResp, error)
	CouponDelete(context.Context, *CouponDeleteReq) (*CouponDeleteResp, error)
	CouponHistoryAdd(context.Context, *CouponHistoryAddReq) (*CouponHistoryAddResp, error)
	CouponHistoryDelete(context.Context, *CouponHistoryDeleteReq) (*CouponHistoryDeleteResp, error)
	CouponHistoryList(context.Context, *CouponHistoryListReq) (*CouponHistoryListResp, error)
	CouponHistoryUpdate(context.Context, *CouponHistoryUpdateReq) (*CouponHistoryUpdateResp, error)
	CouponList(context.Context, *CouponListReq) (*CouponListResp, error)
	CouponUpdate(context.Context, *CouponUpdateReq) (*CouponUpdateResp, error)
	FlashPromotionAdd(context.Context, *FlashPromotionAddReq) (*FlashPromotionAddResp, error)
	FlashPromotionDelete(context.Context, *FlashPromotionDeleteReq) (*FlashPromotionDeleteResp, error)
	FlashPromotionList(context.Context, *FlashPromotionListReq) (*FlashPromotionListResp, error)
	FlashPromotionLogAdd(context.Context, *FlashPromotionLogAddReq) (*FlashPromotionLogAddResp, error)
	FlashPromotionLogDelete(context.Context, *FlashPromotionLogDeleteReq) (*FlashPromotionLogDeleteResp, error)
	FlashPromotionLogList(context.Context, *FlashPromotionLogListReq) (*FlashPromotionLogListResp, error)
	FlashPromotionLogUpdate(context.Context, *FlashPromotionLogUpdateReq) (*FlashPromotionLogUpdateResp, error)
	FlashPromotionSessionAdd(context.Context, *FlashPromotionSessionAddReq) (*FlashPromotionSessionAddResp, error)
	FlashPromotionSessionDelete(context.Context, *FlashPromotionSessionDeleteReq) (*FlashPromotionSessionDeleteResp, error)
	FlashPromotionSessionList(context.Context, *FlashPromotionSessionListReq) (*FlashPromotionSessionListResp, error)
	FlashPromotionSessionUpdate(context.Context, *FlashPromotionSessionUpdateReq) (*FlashPromotionSessionUpdateResp, error)
	FlashPromotionUpdate(context.Context, *FlashPromotionUpdateReq) (*FlashPromotionUpdateResp, error)
	HomeAdvertiseAdd(context.Context, *HomeAdvertiseAddReq) (*HomeAdvertiseAddResp, error)
	HomeAdvertiseDelete(context.Context, *HomeAdvertiseDeleteReq) (*HomeAdvertiseDeleteResp, error)
	HomeAdvertiseList(context.Context, *HomeAdvertiseListReq) (*HomeAdvertiseListResp, error)
	HomeAdvertiseUpdate(context.Context, *HomeAdvertiseUpdateReq) (*HomeAdvertiseUpdateResp, error)
	HomeBrandAdd(context.Context, *HomeBrandAddReq) (*HomeBrandAddResp, error)
	HomeBrandDelete(context.Context, *HomeBrandDeleteReq) (*HomeBrandDeleteResp, error)
	HomeBrandList(context.Context, *HomeBrandListReq) (*HomeBrandListResp, error)
	HomeBrandUpdate(context.Context, *HomeBrandUpdateReq) (*HomeBrandUpdateResp, error)
	HomeNewProductAdd(context.Context, *HomeNewProductAddReq) (*HomeNewProductAddResp, error)
	HomeNewProductDelete(context.Context, *HomeNewProductDeleteReq) (*HomeNewProductDeleteResp, error)
	HomeNewProductList(context.Context, *HomeNewProductListReq) (*HomeNewProductListResp, error)
	HomeNewProductUpdate(context.Context, *HomeNewProductUpdateReq) (*HomeNewProductUpdateResp, error)
	HomeRecommendProductAdd(context.Context, *HomeRecommendProductAddReq) (*HomeRecommendProductAddResp, error)
	HomeRecommendProductDelete(context.Context, *HomeRecommendProductDeleteReq) (*HomeRecommendProductDeleteResp, error)
	HomeRecommendProductList(context.Context, *HomeRecommendProductListReq) (*HomeRecommendProductListResp, error)
	HomeRecommendProductUpdate(context.Context, *HomeRecommendProductUpdateReq) (*HomeRecommendProductUpdateResp, error)
	HomeRecommendSubjectAdd(context.Context, *HomeRecommendSubjectAddReq) (*HomeRecommendSubjectAddResp, error)
	HomeRecommendSubjectDelete(context.Context, *HomeRecommendSubjectDeleteReq) (*HomeRecommendSubjectDeleteResp, error)
	HomeRecommendSubjectList(context.Context, *HomeRecommendSubjectListReq) (*HomeRecommendSubjectListResp, error)
	HomeRecommendSubjectUpdate(context.Context, *HomeRecommendSubjectUpdateReq) (*HomeRecommendSubjectUpdateResp, error)
}

func RegisterSmsHTTPServer(s *http.Server, srv SmsHTTPServer) {
	r := s.Route("/")
	r.POST("/api/sms/coupon/add", _Sms_CouponAdd0_HTTP_Handler(srv))
	r.POST("/api/sms/coupon/list", _Sms_CouponList0_HTTP_Handler(srv))
	r.POST("/api/sms/coupon/update", _Sms_CouponUpdate0_HTTP_Handler(srv))
	r.POST("/api/sms/coupon/delete", _Sms_CouponDelete0_HTTP_Handler(srv))
	r.POST("/api/sms/couponhistory/add", _Sms_CouponHistoryAdd0_HTTP_Handler(srv))
	r.POST("/api/sms/couponhistory/list", _Sms_CouponHistoryList0_HTTP_Handler(srv))
	r.POST("/api/sms/couponhistory/update", _Sms_CouponHistoryUpdate0_HTTP_Handler(srv))
	r.POST("/api/sms/couponhistory/delete", _Sms_CouponHistoryDelete0_HTTP_Handler(srv))
	r.POST("/api/sms/flashpromotionlog/add", _Sms_FlashPromotionLogAdd0_HTTP_Handler(srv))
	r.POST("/api/sms/flashpromotionlog/list", _Sms_FlashPromotionLogList0_HTTP_Handler(srv))
	r.POST("/api/sms/flashpromotionlog/update", _Sms_FlashPromotionLogUpdate0_HTTP_Handler(srv))
	r.POST("/api/sms/flashpromotionlog/delete", _Sms_FlashPromotionLogDelete0_HTTP_Handler(srv))
	r.POST("/api/sms/flashpromotion/add", _Sms_FlashPromotionAdd0_HTTP_Handler(srv))
	r.POST("/api/sms/flashpromotion/list", _Sms_FlashPromotionList0_HTTP_Handler(srv))
	r.POST("/api/sms/flashpromotion/update", _Sms_FlashPromotionUpdate0_HTTP_Handler(srv))
	r.POST("/api/sms/flashpromotion/delete", _Sms_FlashPromotionDelete0_HTTP_Handler(srv))
	r.POST("/api/sms/flashpromotionsession/add", _Sms_FlashPromotionSessionAdd0_HTTP_Handler(srv))
	r.POST("/api/sms/flashpromotionsession/list", _Sms_FlashPromotionSessionList0_HTTP_Handler(srv))
	r.POST("/api/sms/flashpromotionsession/update", _Sms_FlashPromotionSessionUpdate0_HTTP_Handler(srv))
	r.POST("/api/sms/flashpromotionsession/delete", _Sms_FlashPromotionSessionDelete0_HTTP_Handler(srv))
	r.POST("/api/sms/homeadvertise/add", _Sms_HomeAdvertiseAdd0_HTTP_Handler(srv))
	r.POST("/api/sms/homeadvertise/list", _Sms_HomeAdvertiseList0_HTTP_Handler(srv))
	r.POST("/api/sms/homeadvertise/update", _Sms_HomeAdvertiseUpdate0_HTTP_Handler(srv))
	r.POST("/api/sms/homeadvertise/delete", _Sms_HomeAdvertiseDelete0_HTTP_Handler(srv))
	r.POST("/api/sms/homebrand/add", _Sms_HomeBrandAdd0_HTTP_Handler(srv))
	r.POST("/api/sms/homebrand/list", _Sms_HomeBrandList0_HTTP_Handler(srv))
	r.POST("/api/sms/homebrand/update", _Sms_HomeBrandUpdate0_HTTP_Handler(srv))
	r.POST("/api/sms/homebrand/delete", _Sms_HomeBrandDelete0_HTTP_Handler(srv))
	r.POST("/api/sms/homenewproduct/add", _Sms_HomeNewProductAdd0_HTTP_Handler(srv))
	r.POST("/api/sms/homenewproduct/list", _Sms_HomeNewProductList0_HTTP_Handler(srv))
	r.POST("/api/sms/homenewproduct/update", _Sms_HomeNewProductUpdate0_HTTP_Handler(srv))
	r.POST("/api/sms/homenewproduct/delete", _Sms_HomeNewProductDelete0_HTTP_Handler(srv))
	r.POST("/api/sms/homerecommendproduct/add", _Sms_HomeRecommendProductAdd0_HTTP_Handler(srv))
	r.POST("/api/sms/homerecommendproduct/list", _Sms_HomeRecommendProductList0_HTTP_Handler(srv))
	r.POST("/api/sms/homerecommendproduct/update", _Sms_HomeRecommendProductUpdate0_HTTP_Handler(srv))
	r.POST("/api/sms/homerecommendproduct/delete", _Sms_HomeRecommendProductDelete0_HTTP_Handler(srv))
	r.POST("/api/sms/homerecommendsubject/add", _Sms_HomeRecommendSubjectAdd0_HTTP_Handler(srv))
	r.POST("/api/sms/homerecommendsubject/list", _Sms_HomeRecommendSubjectList0_HTTP_Handler(srv))
	r.POST("/api/sms/homerecommendsubject/update", _Sms_HomeRecommendSubjectUpdate0_HTTP_Handler(srv))
	r.POST("/api/sms/homerecommendsubject/delete", _Sms_HomeRecommendSubjectDelete0_HTTP_Handler(srv))
}

func _Sms_CouponAdd0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CouponAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/CouponAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CouponAdd(ctx, req.(*CouponAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CouponAddResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_CouponList0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CouponListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/CouponList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CouponList(ctx, req.(*CouponListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CouponListResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_CouponUpdate0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CouponUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/CouponUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CouponUpdate(ctx, req.(*CouponUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CouponUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_CouponDelete0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CouponDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/CouponDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CouponDelete(ctx, req.(*CouponDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CouponDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_CouponHistoryAdd0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CouponHistoryAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/CouponHistoryAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CouponHistoryAdd(ctx, req.(*CouponHistoryAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CouponHistoryAddResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_CouponHistoryList0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CouponHistoryListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/CouponHistoryList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CouponHistoryList(ctx, req.(*CouponHistoryListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CouponHistoryListResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_CouponHistoryUpdate0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CouponHistoryUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/CouponHistoryUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CouponHistoryUpdate(ctx, req.(*CouponHistoryUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CouponHistoryUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_CouponHistoryDelete0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CouponHistoryDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/CouponHistoryDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CouponHistoryDelete(ctx, req.(*CouponHistoryDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CouponHistoryDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_FlashPromotionLogAdd0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FlashPromotionLogAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/FlashPromotionLogAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FlashPromotionLogAdd(ctx, req.(*FlashPromotionLogAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FlashPromotionLogAddResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_FlashPromotionLogList0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FlashPromotionLogListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/FlashPromotionLogList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FlashPromotionLogList(ctx, req.(*FlashPromotionLogListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FlashPromotionLogListResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_FlashPromotionLogUpdate0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FlashPromotionLogUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/FlashPromotionLogUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FlashPromotionLogUpdate(ctx, req.(*FlashPromotionLogUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FlashPromotionLogUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_FlashPromotionLogDelete0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FlashPromotionLogDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/FlashPromotionLogDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FlashPromotionLogDelete(ctx, req.(*FlashPromotionLogDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FlashPromotionLogDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_FlashPromotionAdd0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FlashPromotionAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/FlashPromotionAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FlashPromotionAdd(ctx, req.(*FlashPromotionAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FlashPromotionAddResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_FlashPromotionList0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FlashPromotionListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/FlashPromotionList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FlashPromotionList(ctx, req.(*FlashPromotionListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FlashPromotionListResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_FlashPromotionUpdate0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FlashPromotionUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/FlashPromotionUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FlashPromotionUpdate(ctx, req.(*FlashPromotionUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FlashPromotionUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_FlashPromotionDelete0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FlashPromotionDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/FlashPromotionDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FlashPromotionDelete(ctx, req.(*FlashPromotionDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FlashPromotionDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_FlashPromotionSessionAdd0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FlashPromotionSessionAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/FlashPromotionSessionAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FlashPromotionSessionAdd(ctx, req.(*FlashPromotionSessionAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FlashPromotionSessionAddResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_FlashPromotionSessionList0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FlashPromotionSessionListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/FlashPromotionSessionList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FlashPromotionSessionList(ctx, req.(*FlashPromotionSessionListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FlashPromotionSessionListResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_FlashPromotionSessionUpdate0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FlashPromotionSessionUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/FlashPromotionSessionUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FlashPromotionSessionUpdate(ctx, req.(*FlashPromotionSessionUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FlashPromotionSessionUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_FlashPromotionSessionDelete0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FlashPromotionSessionDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/FlashPromotionSessionDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FlashPromotionSessionDelete(ctx, req.(*FlashPromotionSessionDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FlashPromotionSessionDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_HomeAdvertiseAdd0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HomeAdvertiseAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/HomeAdvertiseAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HomeAdvertiseAdd(ctx, req.(*HomeAdvertiseAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HomeAdvertiseAddResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_HomeAdvertiseList0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HomeAdvertiseListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/HomeAdvertiseList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HomeAdvertiseList(ctx, req.(*HomeAdvertiseListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HomeAdvertiseListResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_HomeAdvertiseUpdate0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HomeAdvertiseUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/HomeAdvertiseUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HomeAdvertiseUpdate(ctx, req.(*HomeAdvertiseUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HomeAdvertiseUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_HomeAdvertiseDelete0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HomeAdvertiseDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/HomeAdvertiseDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HomeAdvertiseDelete(ctx, req.(*HomeAdvertiseDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HomeAdvertiseDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_HomeBrandAdd0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HomeBrandAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/HomeBrandAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HomeBrandAdd(ctx, req.(*HomeBrandAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HomeBrandAddResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_HomeBrandList0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HomeBrandListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/HomeBrandList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HomeBrandList(ctx, req.(*HomeBrandListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HomeBrandListResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_HomeBrandUpdate0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HomeBrandUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/HomeBrandUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HomeBrandUpdate(ctx, req.(*HomeBrandUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HomeBrandUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_HomeBrandDelete0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HomeBrandDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/HomeBrandDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HomeBrandDelete(ctx, req.(*HomeBrandDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HomeBrandDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_HomeNewProductAdd0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HomeNewProductAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/HomeNewProductAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HomeNewProductAdd(ctx, req.(*HomeNewProductAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HomeNewProductAddResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_HomeNewProductList0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HomeNewProductListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/HomeNewProductList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HomeNewProductList(ctx, req.(*HomeNewProductListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HomeNewProductListResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_HomeNewProductUpdate0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HomeNewProductUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/HomeNewProductUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HomeNewProductUpdate(ctx, req.(*HomeNewProductUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HomeNewProductUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_HomeNewProductDelete0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HomeNewProductDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/HomeNewProductDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HomeNewProductDelete(ctx, req.(*HomeNewProductDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HomeNewProductDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_HomeRecommendProductAdd0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HomeRecommendProductAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/HomeRecommendProductAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HomeRecommendProductAdd(ctx, req.(*HomeRecommendProductAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HomeRecommendProductAddResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_HomeRecommendProductList0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HomeRecommendProductListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/HomeRecommendProductList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HomeRecommendProductList(ctx, req.(*HomeRecommendProductListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HomeRecommendProductListResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_HomeRecommendProductUpdate0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HomeRecommendProductUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/HomeRecommendProductUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HomeRecommendProductUpdate(ctx, req.(*HomeRecommendProductUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HomeRecommendProductUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_HomeRecommendProductDelete0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HomeRecommendProductDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/HomeRecommendProductDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HomeRecommendProductDelete(ctx, req.(*HomeRecommendProductDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HomeRecommendProductDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_HomeRecommendSubjectAdd0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HomeRecommendSubjectAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/HomeRecommendSubjectAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HomeRecommendSubjectAdd(ctx, req.(*HomeRecommendSubjectAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HomeRecommendSubjectAddResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_HomeRecommendSubjectList0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HomeRecommendSubjectListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/HomeRecommendSubjectList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HomeRecommendSubjectList(ctx, req.(*HomeRecommendSubjectListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HomeRecommendSubjectListResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_HomeRecommendSubjectUpdate0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HomeRecommendSubjectUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/HomeRecommendSubjectUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HomeRecommendSubjectUpdate(ctx, req.(*HomeRecommendSubjectUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HomeRecommendSubjectUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Sms_HomeRecommendSubjectDelete0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HomeRecommendSubjectDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sms/HomeRecommendSubjectDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HomeRecommendSubjectDelete(ctx, req.(*HomeRecommendSubjectDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HomeRecommendSubjectDeleteResp)
		return ctx.Result(200, reply)
	}
}

type SmsHTTPClient interface {
	CouponAdd(ctx context.Context, req *CouponAddReq, opts ...http.CallOption) (rsp *CouponAddResp, err error)
	CouponDelete(ctx context.Context, req *CouponDeleteReq, opts ...http.CallOption) (rsp *CouponDeleteResp, err error)
	CouponHistoryAdd(ctx context.Context, req *CouponHistoryAddReq, opts ...http.CallOption) (rsp *CouponHistoryAddResp, err error)
	CouponHistoryDelete(ctx context.Context, req *CouponHistoryDeleteReq, opts ...http.CallOption) (rsp *CouponHistoryDeleteResp, err error)
	CouponHistoryList(ctx context.Context, req *CouponHistoryListReq, opts ...http.CallOption) (rsp *CouponHistoryListResp, err error)
	CouponHistoryUpdate(ctx context.Context, req *CouponHistoryUpdateReq, opts ...http.CallOption) (rsp *CouponHistoryUpdateResp, err error)
	CouponList(ctx context.Context, req *CouponListReq, opts ...http.CallOption) (rsp *CouponListResp, err error)
	CouponUpdate(ctx context.Context, req *CouponUpdateReq, opts ...http.CallOption) (rsp *CouponUpdateResp, err error)
	FlashPromotionAdd(ctx context.Context, req *FlashPromotionAddReq, opts ...http.CallOption) (rsp *FlashPromotionAddResp, err error)
	FlashPromotionDelete(ctx context.Context, req *FlashPromotionDeleteReq, opts ...http.CallOption) (rsp *FlashPromotionDeleteResp, err error)
	FlashPromotionList(ctx context.Context, req *FlashPromotionListReq, opts ...http.CallOption) (rsp *FlashPromotionListResp, err error)
	FlashPromotionLogAdd(ctx context.Context, req *FlashPromotionLogAddReq, opts ...http.CallOption) (rsp *FlashPromotionLogAddResp, err error)
	FlashPromotionLogDelete(ctx context.Context, req *FlashPromotionLogDeleteReq, opts ...http.CallOption) (rsp *FlashPromotionLogDeleteResp, err error)
	FlashPromotionLogList(ctx context.Context, req *FlashPromotionLogListReq, opts ...http.CallOption) (rsp *FlashPromotionLogListResp, err error)
	FlashPromotionLogUpdate(ctx context.Context, req *FlashPromotionLogUpdateReq, opts ...http.CallOption) (rsp *FlashPromotionLogUpdateResp, err error)
	FlashPromotionSessionAdd(ctx context.Context, req *FlashPromotionSessionAddReq, opts ...http.CallOption) (rsp *FlashPromotionSessionAddResp, err error)
	FlashPromotionSessionDelete(ctx context.Context, req *FlashPromotionSessionDeleteReq, opts ...http.CallOption) (rsp *FlashPromotionSessionDeleteResp, err error)
	FlashPromotionSessionList(ctx context.Context, req *FlashPromotionSessionListReq, opts ...http.CallOption) (rsp *FlashPromotionSessionListResp, err error)
	FlashPromotionSessionUpdate(ctx context.Context, req *FlashPromotionSessionUpdateReq, opts ...http.CallOption) (rsp *FlashPromotionSessionUpdateResp, err error)
	FlashPromotionUpdate(ctx context.Context, req *FlashPromotionUpdateReq, opts ...http.CallOption) (rsp *FlashPromotionUpdateResp, err error)
	HomeAdvertiseAdd(ctx context.Context, req *HomeAdvertiseAddReq, opts ...http.CallOption) (rsp *HomeAdvertiseAddResp, err error)
	HomeAdvertiseDelete(ctx context.Context, req *HomeAdvertiseDeleteReq, opts ...http.CallOption) (rsp *HomeAdvertiseDeleteResp, err error)
	HomeAdvertiseList(ctx context.Context, req *HomeAdvertiseListReq, opts ...http.CallOption) (rsp *HomeAdvertiseListResp, err error)
	HomeAdvertiseUpdate(ctx context.Context, req *HomeAdvertiseUpdateReq, opts ...http.CallOption) (rsp *HomeAdvertiseUpdateResp, err error)
	HomeBrandAdd(ctx context.Context, req *HomeBrandAddReq, opts ...http.CallOption) (rsp *HomeBrandAddResp, err error)
	HomeBrandDelete(ctx context.Context, req *HomeBrandDeleteReq, opts ...http.CallOption) (rsp *HomeBrandDeleteResp, err error)
	HomeBrandList(ctx context.Context, req *HomeBrandListReq, opts ...http.CallOption) (rsp *HomeBrandListResp, err error)
	HomeBrandUpdate(ctx context.Context, req *HomeBrandUpdateReq, opts ...http.CallOption) (rsp *HomeBrandUpdateResp, err error)
	HomeNewProductAdd(ctx context.Context, req *HomeNewProductAddReq, opts ...http.CallOption) (rsp *HomeNewProductAddResp, err error)
	HomeNewProductDelete(ctx context.Context, req *HomeNewProductDeleteReq, opts ...http.CallOption) (rsp *HomeNewProductDeleteResp, err error)
	HomeNewProductList(ctx context.Context, req *HomeNewProductListReq, opts ...http.CallOption) (rsp *HomeNewProductListResp, err error)
	HomeNewProductUpdate(ctx context.Context, req *HomeNewProductUpdateReq, opts ...http.CallOption) (rsp *HomeNewProductUpdateResp, err error)
	HomeRecommendProductAdd(ctx context.Context, req *HomeRecommendProductAddReq, opts ...http.CallOption) (rsp *HomeRecommendProductAddResp, err error)
	HomeRecommendProductDelete(ctx context.Context, req *HomeRecommendProductDeleteReq, opts ...http.CallOption) (rsp *HomeRecommendProductDeleteResp, err error)
	HomeRecommendProductList(ctx context.Context, req *HomeRecommendProductListReq, opts ...http.CallOption) (rsp *HomeRecommendProductListResp, err error)
	HomeRecommendProductUpdate(ctx context.Context, req *HomeRecommendProductUpdateReq, opts ...http.CallOption) (rsp *HomeRecommendProductUpdateResp, err error)
	HomeRecommendSubjectAdd(ctx context.Context, req *HomeRecommendSubjectAddReq, opts ...http.CallOption) (rsp *HomeRecommendSubjectAddResp, err error)
	HomeRecommendSubjectDelete(ctx context.Context, req *HomeRecommendSubjectDeleteReq, opts ...http.CallOption) (rsp *HomeRecommendSubjectDeleteResp, err error)
	HomeRecommendSubjectList(ctx context.Context, req *HomeRecommendSubjectListReq, opts ...http.CallOption) (rsp *HomeRecommendSubjectListResp, err error)
	HomeRecommendSubjectUpdate(ctx context.Context, req *HomeRecommendSubjectUpdateReq, opts ...http.CallOption) (rsp *HomeRecommendSubjectUpdateResp, err error)
}

type SmsHTTPClientImpl struct {
	cc *http.Client
}

func NewSmsHTTPClient(client *http.Client) SmsHTTPClient {
	return &SmsHTTPClientImpl{client}
}

func (c *SmsHTTPClientImpl) CouponAdd(ctx context.Context, in *CouponAddReq, opts ...http.CallOption) (*CouponAddResp, error) {
	var out CouponAddResp
	pattern := "/api/sms/coupon/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/CouponAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) CouponDelete(ctx context.Context, in *CouponDeleteReq, opts ...http.CallOption) (*CouponDeleteResp, error) {
	var out CouponDeleteResp
	pattern := "/api/sms/coupon/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/CouponDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) CouponHistoryAdd(ctx context.Context, in *CouponHistoryAddReq, opts ...http.CallOption) (*CouponHistoryAddResp, error) {
	var out CouponHistoryAddResp
	pattern := "/api/sms/couponhistory/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/CouponHistoryAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) CouponHistoryDelete(ctx context.Context, in *CouponHistoryDeleteReq, opts ...http.CallOption) (*CouponHistoryDeleteResp, error) {
	var out CouponHistoryDeleteResp
	pattern := "/api/sms/couponhistory/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/CouponHistoryDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) CouponHistoryList(ctx context.Context, in *CouponHistoryListReq, opts ...http.CallOption) (*CouponHistoryListResp, error) {
	var out CouponHistoryListResp
	pattern := "/api/sms/couponhistory/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/CouponHistoryList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) CouponHistoryUpdate(ctx context.Context, in *CouponHistoryUpdateReq, opts ...http.CallOption) (*CouponHistoryUpdateResp, error) {
	var out CouponHistoryUpdateResp
	pattern := "/api/sms/couponhistory/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/CouponHistoryUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) CouponList(ctx context.Context, in *CouponListReq, opts ...http.CallOption) (*CouponListResp, error) {
	var out CouponListResp
	pattern := "/api/sms/coupon/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/CouponList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) CouponUpdate(ctx context.Context, in *CouponUpdateReq, opts ...http.CallOption) (*CouponUpdateResp, error) {
	var out CouponUpdateResp
	pattern := "/api/sms/coupon/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/CouponUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) FlashPromotionAdd(ctx context.Context, in *FlashPromotionAddReq, opts ...http.CallOption) (*FlashPromotionAddResp, error) {
	var out FlashPromotionAddResp
	pattern := "/api/sms/flashpromotion/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/FlashPromotionAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) FlashPromotionDelete(ctx context.Context, in *FlashPromotionDeleteReq, opts ...http.CallOption) (*FlashPromotionDeleteResp, error) {
	var out FlashPromotionDeleteResp
	pattern := "/api/sms/flashpromotion/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/FlashPromotionDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) FlashPromotionList(ctx context.Context, in *FlashPromotionListReq, opts ...http.CallOption) (*FlashPromotionListResp, error) {
	var out FlashPromotionListResp
	pattern := "/api/sms/flashpromotion/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/FlashPromotionList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) FlashPromotionLogAdd(ctx context.Context, in *FlashPromotionLogAddReq, opts ...http.CallOption) (*FlashPromotionLogAddResp, error) {
	var out FlashPromotionLogAddResp
	pattern := "/api/sms/flashpromotionlog/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/FlashPromotionLogAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) FlashPromotionLogDelete(ctx context.Context, in *FlashPromotionLogDeleteReq, opts ...http.CallOption) (*FlashPromotionLogDeleteResp, error) {
	var out FlashPromotionLogDeleteResp
	pattern := "/api/sms/flashpromotionlog/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/FlashPromotionLogDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) FlashPromotionLogList(ctx context.Context, in *FlashPromotionLogListReq, opts ...http.CallOption) (*FlashPromotionLogListResp, error) {
	var out FlashPromotionLogListResp
	pattern := "/api/sms/flashpromotionlog/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/FlashPromotionLogList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) FlashPromotionLogUpdate(ctx context.Context, in *FlashPromotionLogUpdateReq, opts ...http.CallOption) (*FlashPromotionLogUpdateResp, error) {
	var out FlashPromotionLogUpdateResp
	pattern := "/api/sms/flashpromotionlog/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/FlashPromotionLogUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) FlashPromotionSessionAdd(ctx context.Context, in *FlashPromotionSessionAddReq, opts ...http.CallOption) (*FlashPromotionSessionAddResp, error) {
	var out FlashPromotionSessionAddResp
	pattern := "/api/sms/flashpromotionsession/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/FlashPromotionSessionAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) FlashPromotionSessionDelete(ctx context.Context, in *FlashPromotionSessionDeleteReq, opts ...http.CallOption) (*FlashPromotionSessionDeleteResp, error) {
	var out FlashPromotionSessionDeleteResp
	pattern := "/api/sms/flashpromotionsession/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/FlashPromotionSessionDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) FlashPromotionSessionList(ctx context.Context, in *FlashPromotionSessionListReq, opts ...http.CallOption) (*FlashPromotionSessionListResp, error) {
	var out FlashPromotionSessionListResp
	pattern := "/api/sms/flashpromotionsession/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/FlashPromotionSessionList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) FlashPromotionSessionUpdate(ctx context.Context, in *FlashPromotionSessionUpdateReq, opts ...http.CallOption) (*FlashPromotionSessionUpdateResp, error) {
	var out FlashPromotionSessionUpdateResp
	pattern := "/api/sms/flashpromotionsession/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/FlashPromotionSessionUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) FlashPromotionUpdate(ctx context.Context, in *FlashPromotionUpdateReq, opts ...http.CallOption) (*FlashPromotionUpdateResp, error) {
	var out FlashPromotionUpdateResp
	pattern := "/api/sms/flashpromotion/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/FlashPromotionUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) HomeAdvertiseAdd(ctx context.Context, in *HomeAdvertiseAddReq, opts ...http.CallOption) (*HomeAdvertiseAddResp, error) {
	var out HomeAdvertiseAddResp
	pattern := "/api/sms/homeadvertise/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/HomeAdvertiseAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) HomeAdvertiseDelete(ctx context.Context, in *HomeAdvertiseDeleteReq, opts ...http.CallOption) (*HomeAdvertiseDeleteResp, error) {
	var out HomeAdvertiseDeleteResp
	pattern := "/api/sms/homeadvertise/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/HomeAdvertiseDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) HomeAdvertiseList(ctx context.Context, in *HomeAdvertiseListReq, opts ...http.CallOption) (*HomeAdvertiseListResp, error) {
	var out HomeAdvertiseListResp
	pattern := "/api/sms/homeadvertise/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/HomeAdvertiseList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) HomeAdvertiseUpdate(ctx context.Context, in *HomeAdvertiseUpdateReq, opts ...http.CallOption) (*HomeAdvertiseUpdateResp, error) {
	var out HomeAdvertiseUpdateResp
	pattern := "/api/sms/homeadvertise/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/HomeAdvertiseUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) HomeBrandAdd(ctx context.Context, in *HomeBrandAddReq, opts ...http.CallOption) (*HomeBrandAddResp, error) {
	var out HomeBrandAddResp
	pattern := "/api/sms/homebrand/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/HomeBrandAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) HomeBrandDelete(ctx context.Context, in *HomeBrandDeleteReq, opts ...http.CallOption) (*HomeBrandDeleteResp, error) {
	var out HomeBrandDeleteResp
	pattern := "/api/sms/homebrand/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/HomeBrandDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) HomeBrandList(ctx context.Context, in *HomeBrandListReq, opts ...http.CallOption) (*HomeBrandListResp, error) {
	var out HomeBrandListResp
	pattern := "/api/sms/homebrand/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/HomeBrandList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) HomeBrandUpdate(ctx context.Context, in *HomeBrandUpdateReq, opts ...http.CallOption) (*HomeBrandUpdateResp, error) {
	var out HomeBrandUpdateResp
	pattern := "/api/sms/homebrand/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/HomeBrandUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) HomeNewProductAdd(ctx context.Context, in *HomeNewProductAddReq, opts ...http.CallOption) (*HomeNewProductAddResp, error) {
	var out HomeNewProductAddResp
	pattern := "/api/sms/homenewproduct/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/HomeNewProductAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) HomeNewProductDelete(ctx context.Context, in *HomeNewProductDeleteReq, opts ...http.CallOption) (*HomeNewProductDeleteResp, error) {
	var out HomeNewProductDeleteResp
	pattern := "/api/sms/homenewproduct/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/HomeNewProductDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) HomeNewProductList(ctx context.Context, in *HomeNewProductListReq, opts ...http.CallOption) (*HomeNewProductListResp, error) {
	var out HomeNewProductListResp
	pattern := "/api/sms/homenewproduct/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/HomeNewProductList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) HomeNewProductUpdate(ctx context.Context, in *HomeNewProductUpdateReq, opts ...http.CallOption) (*HomeNewProductUpdateResp, error) {
	var out HomeNewProductUpdateResp
	pattern := "/api/sms/homenewproduct/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/HomeNewProductUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) HomeRecommendProductAdd(ctx context.Context, in *HomeRecommendProductAddReq, opts ...http.CallOption) (*HomeRecommendProductAddResp, error) {
	var out HomeRecommendProductAddResp
	pattern := "/api/sms/homerecommendproduct/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/HomeRecommendProductAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) HomeRecommendProductDelete(ctx context.Context, in *HomeRecommendProductDeleteReq, opts ...http.CallOption) (*HomeRecommendProductDeleteResp, error) {
	var out HomeRecommendProductDeleteResp
	pattern := "/api/sms/homerecommendproduct/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/HomeRecommendProductDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) HomeRecommendProductList(ctx context.Context, in *HomeRecommendProductListReq, opts ...http.CallOption) (*HomeRecommendProductListResp, error) {
	var out HomeRecommendProductListResp
	pattern := "/api/sms/homerecommendproduct/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/HomeRecommendProductList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) HomeRecommendProductUpdate(ctx context.Context, in *HomeRecommendProductUpdateReq, opts ...http.CallOption) (*HomeRecommendProductUpdateResp, error) {
	var out HomeRecommendProductUpdateResp
	pattern := "/api/sms/homerecommendproduct/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/HomeRecommendProductUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) HomeRecommendSubjectAdd(ctx context.Context, in *HomeRecommendSubjectAddReq, opts ...http.CallOption) (*HomeRecommendSubjectAddResp, error) {
	var out HomeRecommendSubjectAddResp
	pattern := "/api/sms/homerecommendsubject/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/HomeRecommendSubjectAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) HomeRecommendSubjectDelete(ctx context.Context, in *HomeRecommendSubjectDeleteReq, opts ...http.CallOption) (*HomeRecommendSubjectDeleteResp, error) {
	var out HomeRecommendSubjectDeleteResp
	pattern := "/api/sms/homerecommendsubject/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/HomeRecommendSubjectDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) HomeRecommendSubjectList(ctx context.Context, in *HomeRecommendSubjectListReq, opts ...http.CallOption) (*HomeRecommendSubjectListResp, error) {
	var out HomeRecommendSubjectListResp
	pattern := "/api/sms/homerecommendsubject/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/HomeRecommendSubjectList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) HomeRecommendSubjectUpdate(ctx context.Context, in *HomeRecommendSubjectUpdateReq, opts ...http.CallOption) (*HomeRecommendSubjectUpdateResp, error) {
	var out HomeRecommendSubjectUpdateResp
	pattern := "/api/sms/homerecommendsubject/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sms/HomeRecommendSubjectUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
