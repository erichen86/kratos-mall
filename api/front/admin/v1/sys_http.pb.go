// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type SysHTTPServer interface {
	DeptAdd(context.Context, *DeptAddReq) (*DeptAddResp, error)
	DeptDelete(context.Context, *DeptDeleteReq) (*DeptDeleteResp, error)
	DeptList(context.Context, *DeptListReq) (*DeptListResp, error)
	DeptUpdate(context.Context, *DeptUpdateReq) (*DeptUpdateResp, error)
	DictAdd(context.Context, *DictAddReq) (*DictAddResp, error)
	DictDelete(context.Context, *DictDeleteReq) (*DictDeleteResp, error)
	DictList(context.Context, *DictListReq) (*DictListResp, error)
	DictUpdate(context.Context, *DictUpdateReq) (*DictUpdateResp, error)
	JobAdd(context.Context, *JobAddReq) (*JobAddResp, error)
	JobDelete(context.Context, *JobDeleteReq) (*JobDeleteResp, error)
	JobList(context.Context, *JobListReq) (*JobListResp, error)
	JobUpdate(context.Context, *JobUpdateReq) (*JobUpdateResp, error)
	Login(context.Context, *LoginReq) (*LoginResp, error)
	LoginLogDelete(context.Context, *LoginLogDeleteReq) (*LoginLogDeleteResp, error)
	LoginLogList(context.Context, *LoginLogListReq) (*LoginLogListResp, error)
	MenuAdd(context.Context, *MenuAddReq) (*MenuAddResp, error)
	MenuDelete(context.Context, *MenuDeleteReq) (*MenuDeleteResp, error)
	MenuList(context.Context, *MenuListReq) (*MenuListResp, error)
	MenuUpdate(context.Context, *MenuUpdateReq) (*MenuUpdateResp, error)
	QueryMenuByRoleId(context.Context, *QueryMenuByRoleIdReq) (*QueryMenuByRoleIdResp, error)
	ReSetPassword(context.Context, *ReSetPasswordReq) (*ReSetPasswordResp, error)
	RoleAdd(context.Context, *RoleAddReq) (*RoleAddResp, error)
	RoleDelete(context.Context, *RoleDeleteReq) (*RoleDeleteResp, error)
	RoleList(context.Context, *RoleListReq) (*RoleListResp, error)
	RoleUpdate(context.Context, *RoleUpdateReq) (*RoleUpdateResp, error)
	SelectAllData(context.Context, *SelectDataReq) (*SelectDataResp, error)
	SysLogDelete(context.Context, *SysLogDeleteReq) (*SysLogDeleteResp, error)
	SysLogList(context.Context, *SysLogListReq) (*SysLogListResp, error)
	UpdateMenuRole(context.Context, *UpdateMenuRoleReq) (*UpdateMenuRoleResp, error)
	UpdateUserStatus(context.Context, *UserStatusReq) (*UserStatusResp, error)
	UserAdd(context.Context, *UserAddReq) (*UserAddResp, error)
	UserDelete(context.Context, *UserDeleteReq) (*UserDeleteResp, error)
	UserInfo(context.Context, *InfoReq) (*InfoResp, error)
	UserList(context.Context, *UserListReq) (*UserListResp, error)
	UserUpdate(context.Context, *UserUpdateReq) (*UserUpdateResp, error)
}

func RegisterSysHTTPServer(s *http.Server, srv SysHTTPServer) {
	r := s.Route("/")
	r.POST("/api/sys/user/login", _Sys_Login0_HTTP_Handler(srv))
	r.GET("/api/sys/user/currentUser", _Sys_UserInfo0_HTTP_Handler(srv))
	r.POST("/api/sys/user/add", _Sys_UserAdd0_HTTP_Handler(srv))
	r.POST("/api/sys/user/list", _Sys_UserList0_HTTP_Handler(srv))
	r.POST("/api/sys/user/selectAllData", _Sys_SelectAllData0_HTTP_Handler(srv))
	r.POST("/api/sys/user/update", _Sys_UserUpdate0_HTTP_Handler(srv))
	r.POST("/api/sys/user/delete", _Sys_UserDelete0_HTTP_Handler(srv))
	r.POST("/api/sys/reSetPassword", _Sys_ReSetPassword0_HTTP_Handler(srv))
	r.POST("/api/sys/updateUserStatus", _Sys_UpdateUserStatus0_HTTP_Handler(srv))
	r.POST("/api/sys/role/add", _Sys_RoleAdd0_HTTP_Handler(srv))
	r.POST("/api/sys/role/list", _Sys_RoleList0_HTTP_Handler(srv))
	r.POST("/api/sys/role/update", _Sys_RoleUpdate0_HTTP_Handler(srv))
	r.POST("/api/sys/role/delete", _Sys_RoleDelete0_HTTP_Handler(srv))
	r.POST("/api/sys/role/queryMenuByRoleId", _Sys_QueryMenuByRoleId0_HTTP_Handler(srv))
	r.POST("/api/sys/role/updateRoleMenu", _Sys_UpdateMenuRole0_HTTP_Handler(srv))
	r.POST("/api/sys/menu/add", _Sys_MenuAdd0_HTTP_Handler(srv))
	r.POST("/api/sys/menu/list", _Sys_MenuList0_HTTP_Handler(srv))
	r.POST("/api/sys/menu/update", _Sys_MenuUpdate0_HTTP_Handler(srv))
	r.POST("/api/sys/menu/delete", _Sys_MenuDelete0_HTTP_Handler(srv))
	r.POST("/api/sys/dict/add", _Sys_DictAdd0_HTTP_Handler(srv))
	r.POST("/api/sys/dict/list", _Sys_DictList0_HTTP_Handler(srv))
	r.POST("/api/sys/dict/update", _Sys_DictUpdate0_HTTP_Handler(srv))
	r.POST("/api/sys/dict/delete", _Sys_DictDelete0_HTTP_Handler(srv))
	r.POST("/api/sys/dept/add", _Sys_DeptAdd0_HTTP_Handler(srv))
	r.POST("/api/sys/dept/list", _Sys_DeptList0_HTTP_Handler(srv))
	r.POST("/api/sys/dept/update", _Sys_DeptUpdate0_HTTP_Handler(srv))
	r.POST("/api/sys/dept/delete", _Sys_DeptDelete0_HTTP_Handler(srv))
	r.POST("/api/sys/loginLog/list", _Sys_LoginLogList0_HTTP_Handler(srv))
	r.POST("/api/sys/loginLog/delete", _Sys_LoginLogDelete0_HTTP_Handler(srv))
	r.POST("/api/sys/sysLog/list", _Sys_SysLogList0_HTTP_Handler(srv))
	r.POST("/api/sys/sysLog/delete", _Sys_SysLogDelete0_HTTP_Handler(srv))
	r.POST("/api/sys/job/add", _Sys_JobAdd0_HTTP_Handler(srv))
	r.POST("/api/sys/job/list", _Sys_JobList0_HTTP_Handler(srv))
	r.POST("/api/sys/job/update", _Sys_JobUpdate0_HTTP_Handler(srv))
	r.POST("/api/sys/job/delete", _Sys_JobDelete0_HTTP_Handler(srv))
}

func _Sys_Login0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/Login")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_UserInfo0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in InfoReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/UserInfo")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserInfo(ctx, req.(*InfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*InfoResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_UserAdd0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/UserAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserAdd(ctx, req.(*UserAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserAddResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_UserList0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/UserList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserList(ctx, req.(*UserListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserListResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_SelectAllData0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SelectDataReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/SelectAllData")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SelectAllData(ctx, req.(*SelectDataReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SelectDataResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_UserUpdate0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/UserUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserUpdate(ctx, req.(*UserUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_UserDelete0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/UserDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserDelete(ctx, req.(*UserDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_ReSetPassword0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReSetPasswordReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/ReSetPassword")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReSetPassword(ctx, req.(*ReSetPasswordReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReSetPasswordResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_UpdateUserStatus0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserStatusReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/UpdateUserStatus")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUserStatus(ctx, req.(*UserStatusReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserStatusResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_RoleAdd0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RoleAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/RoleAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RoleAdd(ctx, req.(*RoleAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RoleAddResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_RoleList0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RoleListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/RoleList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RoleList(ctx, req.(*RoleListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RoleListResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_RoleUpdate0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RoleUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/RoleUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RoleUpdate(ctx, req.(*RoleUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RoleUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_RoleDelete0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RoleDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/RoleDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RoleDelete(ctx, req.(*RoleDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RoleDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_QueryMenuByRoleId0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QueryMenuByRoleIdReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/QueryMenuByRoleId")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.QueryMenuByRoleId(ctx, req.(*QueryMenuByRoleIdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QueryMenuByRoleIdResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_UpdateMenuRole0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateMenuRoleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/UpdateMenuRole")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMenuRole(ctx, req.(*UpdateMenuRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateMenuRoleResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_MenuAdd0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MenuAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/MenuAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MenuAdd(ctx, req.(*MenuAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MenuAddResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_MenuList0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MenuListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/MenuList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MenuList(ctx, req.(*MenuListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MenuListResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_MenuUpdate0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MenuUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/MenuUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MenuUpdate(ctx, req.(*MenuUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MenuUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_MenuDelete0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MenuDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/MenuDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MenuDelete(ctx, req.(*MenuDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MenuDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_DictAdd0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DictAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/DictAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DictAdd(ctx, req.(*DictAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DictAddResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_DictList0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DictListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/DictList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DictList(ctx, req.(*DictListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DictListResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_DictUpdate0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DictUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/DictUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DictUpdate(ctx, req.(*DictUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DictUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_DictDelete0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DictDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/DictDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DictDelete(ctx, req.(*DictDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DictDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_DeptAdd0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeptAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/DeptAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeptAdd(ctx, req.(*DeptAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeptAddResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_DeptList0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeptListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/DeptList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeptList(ctx, req.(*DeptListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeptListResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_DeptUpdate0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeptUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/DeptUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeptUpdate(ctx, req.(*DeptUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeptUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_DeptDelete0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeptDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/DeptDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeptDelete(ctx, req.(*DeptDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeptDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_LoginLogList0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginLogListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/LoginLogList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginLogList(ctx, req.(*LoginLogListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginLogListResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_LoginLogDelete0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginLogDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/LoginLogDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginLogDelete(ctx, req.(*LoginLogDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginLogDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysLogList0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysLogListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/SysLogList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysLogList(ctx, req.(*SysLogListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysLogListResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysLogDelete0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysLogDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/SysLogDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysLogDelete(ctx, req.(*SysLogDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysLogDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_JobAdd0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in JobAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/JobAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.JobAdd(ctx, req.(*JobAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*JobAddResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_JobList0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in JobListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/JobList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.JobList(ctx, req.(*JobListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*JobListResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_JobUpdate0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in JobUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/JobUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.JobUpdate(ctx, req.(*JobUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*JobUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_JobDelete0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in JobDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Sys/JobDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.JobDelete(ctx, req.(*JobDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*JobDeleteResp)
		return ctx.Result(200, reply)
	}
}

type SysHTTPClient interface {
	DeptAdd(ctx context.Context, req *DeptAddReq, opts ...http.CallOption) (rsp *DeptAddResp, err error)
	DeptDelete(ctx context.Context, req *DeptDeleteReq, opts ...http.CallOption) (rsp *DeptDeleteResp, err error)
	DeptList(ctx context.Context, req *DeptListReq, opts ...http.CallOption) (rsp *DeptListResp, err error)
	DeptUpdate(ctx context.Context, req *DeptUpdateReq, opts ...http.CallOption) (rsp *DeptUpdateResp, err error)
	DictAdd(ctx context.Context, req *DictAddReq, opts ...http.CallOption) (rsp *DictAddResp, err error)
	DictDelete(ctx context.Context, req *DictDeleteReq, opts ...http.CallOption) (rsp *DictDeleteResp, err error)
	DictList(ctx context.Context, req *DictListReq, opts ...http.CallOption) (rsp *DictListResp, err error)
	DictUpdate(ctx context.Context, req *DictUpdateReq, opts ...http.CallOption) (rsp *DictUpdateResp, err error)
	JobAdd(ctx context.Context, req *JobAddReq, opts ...http.CallOption) (rsp *JobAddResp, err error)
	JobDelete(ctx context.Context, req *JobDeleteReq, opts ...http.CallOption) (rsp *JobDeleteResp, err error)
	JobList(ctx context.Context, req *JobListReq, opts ...http.CallOption) (rsp *JobListResp, err error)
	JobUpdate(ctx context.Context, req *JobUpdateReq, opts ...http.CallOption) (rsp *JobUpdateResp, err error)
	Login(ctx context.Context, req *LoginReq, opts ...http.CallOption) (rsp *LoginResp, err error)
	LoginLogDelete(ctx context.Context, req *LoginLogDeleteReq, opts ...http.CallOption) (rsp *LoginLogDeleteResp, err error)
	LoginLogList(ctx context.Context, req *LoginLogListReq, opts ...http.CallOption) (rsp *LoginLogListResp, err error)
	MenuAdd(ctx context.Context, req *MenuAddReq, opts ...http.CallOption) (rsp *MenuAddResp, err error)
	MenuDelete(ctx context.Context, req *MenuDeleteReq, opts ...http.CallOption) (rsp *MenuDeleteResp, err error)
	MenuList(ctx context.Context, req *MenuListReq, opts ...http.CallOption) (rsp *MenuListResp, err error)
	MenuUpdate(ctx context.Context, req *MenuUpdateReq, opts ...http.CallOption) (rsp *MenuUpdateResp, err error)
	QueryMenuByRoleId(ctx context.Context, req *QueryMenuByRoleIdReq, opts ...http.CallOption) (rsp *QueryMenuByRoleIdResp, err error)
	ReSetPassword(ctx context.Context, req *ReSetPasswordReq, opts ...http.CallOption) (rsp *ReSetPasswordResp, err error)
	RoleAdd(ctx context.Context, req *RoleAddReq, opts ...http.CallOption) (rsp *RoleAddResp, err error)
	RoleDelete(ctx context.Context, req *RoleDeleteReq, opts ...http.CallOption) (rsp *RoleDeleteResp, err error)
	RoleList(ctx context.Context, req *RoleListReq, opts ...http.CallOption) (rsp *RoleListResp, err error)
	RoleUpdate(ctx context.Context, req *RoleUpdateReq, opts ...http.CallOption) (rsp *RoleUpdateResp, err error)
	SelectAllData(ctx context.Context, req *SelectDataReq, opts ...http.CallOption) (rsp *SelectDataResp, err error)
	SysLogDelete(ctx context.Context, req *SysLogDeleteReq, opts ...http.CallOption) (rsp *SysLogDeleteResp, err error)
	SysLogList(ctx context.Context, req *SysLogListReq, opts ...http.CallOption) (rsp *SysLogListResp, err error)
	UpdateMenuRole(ctx context.Context, req *UpdateMenuRoleReq, opts ...http.CallOption) (rsp *UpdateMenuRoleResp, err error)
	UpdateUserStatus(ctx context.Context, req *UserStatusReq, opts ...http.CallOption) (rsp *UserStatusResp, err error)
	UserAdd(ctx context.Context, req *UserAddReq, opts ...http.CallOption) (rsp *UserAddResp, err error)
	UserDelete(ctx context.Context, req *UserDeleteReq, opts ...http.CallOption) (rsp *UserDeleteResp, err error)
	UserInfo(ctx context.Context, req *InfoReq, opts ...http.CallOption) (rsp *InfoResp, err error)
	UserList(ctx context.Context, req *UserListReq, opts ...http.CallOption) (rsp *UserListResp, err error)
	UserUpdate(ctx context.Context, req *UserUpdateReq, opts ...http.CallOption) (rsp *UserUpdateResp, err error)
}

type SysHTTPClientImpl struct {
	cc *http.Client
}

func NewSysHTTPClient(client *http.Client) SysHTTPClient {
	return &SysHTTPClientImpl{client}
}

func (c *SysHTTPClientImpl) DeptAdd(ctx context.Context, in *DeptAddReq, opts ...http.CallOption) (*DeptAddResp, error) {
	var out DeptAddResp
	pattern := "/api/sys/dept/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/DeptAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) DeptDelete(ctx context.Context, in *DeptDeleteReq, opts ...http.CallOption) (*DeptDeleteResp, error) {
	var out DeptDeleteResp
	pattern := "/api/sys/dept/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/DeptDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) DeptList(ctx context.Context, in *DeptListReq, opts ...http.CallOption) (*DeptListResp, error) {
	var out DeptListResp
	pattern := "/api/sys/dept/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/DeptList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) DeptUpdate(ctx context.Context, in *DeptUpdateReq, opts ...http.CallOption) (*DeptUpdateResp, error) {
	var out DeptUpdateResp
	pattern := "/api/sys/dept/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/DeptUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) DictAdd(ctx context.Context, in *DictAddReq, opts ...http.CallOption) (*DictAddResp, error) {
	var out DictAddResp
	pattern := "/api/sys/dict/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/DictAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) DictDelete(ctx context.Context, in *DictDeleteReq, opts ...http.CallOption) (*DictDeleteResp, error) {
	var out DictDeleteResp
	pattern := "/api/sys/dict/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/DictDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) DictList(ctx context.Context, in *DictListReq, opts ...http.CallOption) (*DictListResp, error) {
	var out DictListResp
	pattern := "/api/sys/dict/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/DictList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) DictUpdate(ctx context.Context, in *DictUpdateReq, opts ...http.CallOption) (*DictUpdateResp, error) {
	var out DictUpdateResp
	pattern := "/api/sys/dict/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/DictUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) JobAdd(ctx context.Context, in *JobAddReq, opts ...http.CallOption) (*JobAddResp, error) {
	var out JobAddResp
	pattern := "/api/sys/job/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/JobAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) JobDelete(ctx context.Context, in *JobDeleteReq, opts ...http.CallOption) (*JobDeleteResp, error) {
	var out JobDeleteResp
	pattern := "/api/sys/job/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/JobDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) JobList(ctx context.Context, in *JobListReq, opts ...http.CallOption) (*JobListResp, error) {
	var out JobListResp
	pattern := "/api/sys/job/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/JobList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) JobUpdate(ctx context.Context, in *JobUpdateReq, opts ...http.CallOption) (*JobUpdateResp, error) {
	var out JobUpdateResp
	pattern := "/api/sys/job/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/JobUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) Login(ctx context.Context, in *LoginReq, opts ...http.CallOption) (*LoginResp, error) {
	var out LoginResp
	pattern := "/api/sys/user/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/Login"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) LoginLogDelete(ctx context.Context, in *LoginLogDeleteReq, opts ...http.CallOption) (*LoginLogDeleteResp, error) {
	var out LoginLogDeleteResp
	pattern := "/api/sys/loginLog/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/LoginLogDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) LoginLogList(ctx context.Context, in *LoginLogListReq, opts ...http.CallOption) (*LoginLogListResp, error) {
	var out LoginLogListResp
	pattern := "/api/sys/loginLog/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/LoginLogList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) MenuAdd(ctx context.Context, in *MenuAddReq, opts ...http.CallOption) (*MenuAddResp, error) {
	var out MenuAddResp
	pattern := "/api/sys/menu/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/MenuAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) MenuDelete(ctx context.Context, in *MenuDeleteReq, opts ...http.CallOption) (*MenuDeleteResp, error) {
	var out MenuDeleteResp
	pattern := "/api/sys/menu/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/MenuDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) MenuList(ctx context.Context, in *MenuListReq, opts ...http.CallOption) (*MenuListResp, error) {
	var out MenuListResp
	pattern := "/api/sys/menu/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/MenuList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) MenuUpdate(ctx context.Context, in *MenuUpdateReq, opts ...http.CallOption) (*MenuUpdateResp, error) {
	var out MenuUpdateResp
	pattern := "/api/sys/menu/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/MenuUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) QueryMenuByRoleId(ctx context.Context, in *QueryMenuByRoleIdReq, opts ...http.CallOption) (*QueryMenuByRoleIdResp, error) {
	var out QueryMenuByRoleIdResp
	pattern := "/api/sys/role/queryMenuByRoleId"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/QueryMenuByRoleId"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) ReSetPassword(ctx context.Context, in *ReSetPasswordReq, opts ...http.CallOption) (*ReSetPasswordResp, error) {
	var out ReSetPasswordResp
	pattern := "/api/sys/reSetPassword"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/ReSetPassword"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) RoleAdd(ctx context.Context, in *RoleAddReq, opts ...http.CallOption) (*RoleAddResp, error) {
	var out RoleAddResp
	pattern := "/api/sys/role/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/RoleAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) RoleDelete(ctx context.Context, in *RoleDeleteReq, opts ...http.CallOption) (*RoleDeleteResp, error) {
	var out RoleDeleteResp
	pattern := "/api/sys/role/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/RoleDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) RoleList(ctx context.Context, in *RoleListReq, opts ...http.CallOption) (*RoleListResp, error) {
	var out RoleListResp
	pattern := "/api/sys/role/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/RoleList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) RoleUpdate(ctx context.Context, in *RoleUpdateReq, opts ...http.CallOption) (*RoleUpdateResp, error) {
	var out RoleUpdateResp
	pattern := "/api/sys/role/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/RoleUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SelectAllData(ctx context.Context, in *SelectDataReq, opts ...http.CallOption) (*SelectDataResp, error) {
	var out SelectDataResp
	pattern := "/api/sys/user/selectAllData"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/SelectAllData"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysLogDelete(ctx context.Context, in *SysLogDeleteReq, opts ...http.CallOption) (*SysLogDeleteResp, error) {
	var out SysLogDeleteResp
	pattern := "/api/sys/sysLog/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/SysLogDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysLogList(ctx context.Context, in *SysLogListReq, opts ...http.CallOption) (*SysLogListResp, error) {
	var out SysLogListResp
	pattern := "/api/sys/sysLog/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/SysLogList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) UpdateMenuRole(ctx context.Context, in *UpdateMenuRoleReq, opts ...http.CallOption) (*UpdateMenuRoleResp, error) {
	var out UpdateMenuRoleResp
	pattern := "/api/sys/role/updateRoleMenu"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/UpdateMenuRole"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) UpdateUserStatus(ctx context.Context, in *UserStatusReq, opts ...http.CallOption) (*UserStatusResp, error) {
	var out UserStatusResp
	pattern := "/api/sys/updateUserStatus"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/UpdateUserStatus"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) UserAdd(ctx context.Context, in *UserAddReq, opts ...http.CallOption) (*UserAddResp, error) {
	var out UserAddResp
	pattern := "/api/sys/user/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/UserAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) UserDelete(ctx context.Context, in *UserDeleteReq, opts ...http.CallOption) (*UserDeleteResp, error) {
	var out UserDeleteResp
	pattern := "/api/sys/user/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/UserDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) UserInfo(ctx context.Context, in *InfoReq, opts ...http.CallOption) (*InfoResp, error) {
	var out InfoResp
	pattern := "/api/sys/user/currentUser"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/UserInfo"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) UserList(ctx context.Context, in *UserListReq, opts ...http.CallOption) (*UserListResp, error) {
	var out UserListResp
	pattern := "/api/sys/user/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/UserList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) UserUpdate(ctx context.Context, in *UserUpdateReq, opts ...http.CallOption) (*UserUpdateResp, error) {
	var out UserUpdateResp
	pattern := "/api/sys/user/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Sys/UserUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
