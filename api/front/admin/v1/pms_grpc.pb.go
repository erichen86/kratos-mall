// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PmsClient is the client API for Pms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PmsClient interface {
	ProductAdd(ctx context.Context, in *ProductAddReq, opts ...grpc.CallOption) (*ProductAddResp, error)
	ProductList(ctx context.Context, in *ProductListReq, opts ...grpc.CallOption) (*ProductListResp, error)
	ProductUpdate(ctx context.Context, in *ProductUpdateReq, opts ...grpc.CallOption) (*ProductUpdateResp, error)
	ProductDelete(ctx context.Context, in *ProductDeleteReq, opts ...grpc.CallOption) (*ProductDeleteResp, error)
	BrandAdd(ctx context.Context, in *BrandAddReq, opts ...grpc.CallOption) (*BrandAddResp, error)
	BrandList(ctx context.Context, in *BrandListReq, opts ...grpc.CallOption) (*BrandListResp, error)
	BrandUpdate(ctx context.Context, in *BrandUpdateReq, opts ...grpc.CallOption) (*BrandUpdateResp, error)
	BrandDelete(ctx context.Context, in *BrandDeleteReq, opts ...grpc.CallOption) (*BrandDeleteResp, error)
	CommentAdd(ctx context.Context, in *CommentAddReq, opts ...grpc.CallOption) (*CommentAddResp, error)
	CommentList(ctx context.Context, in *CommentListReq, opts ...grpc.CallOption) (*CommentListResp, error)
	CommentUpdate(ctx context.Context, in *CommentUpdateReq, opts ...grpc.CallOption) (*CommentUpdateResp, error)
	CommentDelete(ctx context.Context, in *CommentDeleteReq, opts ...grpc.CallOption) (*CommentDeleteResp, error)
	FeightTemplateAdd(ctx context.Context, in *FeightTemplateAddReq, opts ...grpc.CallOption) (*FeightTemplateAddResp, error)
	FeightTemplateList(ctx context.Context, in *FeightTemplateListReq, opts ...grpc.CallOption) (*FeightTemplateListResp, error)
	FeightTemplateUpdate(ctx context.Context, in *FeightTemplateUpdateReq, opts ...grpc.CallOption) (*FeightTemplateUpdateResp, error)
	FeightTemplateDelete(ctx context.Context, in *FeightTemplateDeleteReq, opts ...grpc.CallOption) (*FeightTemplateDeleteResp, error)
	MemberPriceAdd(ctx context.Context, in *MemberPriceAddReq, opts ...grpc.CallOption) (*MemberPriceAddResp, error)
	MemberPriceList(ctx context.Context, in *MemberPriceListReq, opts ...grpc.CallOption) (*MemberPriceListResp, error)
	MemberPriceUpdate(ctx context.Context, in *MemberPriceUpdateReq, opts ...grpc.CallOption) (*MemberPriceUpdateResp, error)
	MemberPriceDelete(ctx context.Context, in *MemberPriceDeleteReq, opts ...grpc.CallOption) (*MemberPriceDeleteResp, error)
	ProductCategoryAdd(ctx context.Context, in *ProductCategoryAddReq, opts ...grpc.CallOption) (*ProductCategoryAddResp, error)
	ProductCategoryList(ctx context.Context, in *ProductCategoryListReq, opts ...grpc.CallOption) (*ProductCategoryListResp, error)
	ProductCategoryUpdate(ctx context.Context, in *ProductCategoryUpdateReq, opts ...grpc.CallOption) (*ProductCategoryUpdateResp, error)
	ProductCategoryDelete(ctx context.Context, in *ProductCategoryDeleteReq, opts ...grpc.CallOption) (*ProductCategoryDeleteResp, error)
	SkuStockAdd(ctx context.Context, in *SkuStockAddReq, opts ...grpc.CallOption) (*SkuStockAddResp, error)
	SkuStockList(ctx context.Context, in *SkuStockListReq, opts ...grpc.CallOption) (*SkuStockListResp, error)
	SkuStockUpdate(ctx context.Context, in *SkuStockUpdateReq, opts ...grpc.CallOption) (*SkuStockUpdateResp, error)
	SkuStockDelete(ctx context.Context, in *SkuStockDeleteReq, opts ...grpc.CallOption) (*SkuStockDeleteResp, error)
}

type pmsClient struct {
	cc grpc.ClientConnInterface
}

func NewPmsClient(cc grpc.ClientConnInterface) PmsClient {
	return &pmsClient{cc}
}

func (c *pmsClient) ProductAdd(ctx context.Context, in *ProductAddReq, opts ...grpc.CallOption) (*ProductAddResp, error) {
	out := new(ProductAddResp)
	err := c.cc.Invoke(ctx, "/front.admin.v1.Pms/ProductAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductList(ctx context.Context, in *ProductListReq, opts ...grpc.CallOption) (*ProductListResp, error) {
	out := new(ProductListResp)
	err := c.cc.Invoke(ctx, "/front.admin.v1.Pms/ProductList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductUpdate(ctx context.Context, in *ProductUpdateReq, opts ...grpc.CallOption) (*ProductUpdateResp, error) {
	out := new(ProductUpdateResp)
	err := c.cc.Invoke(ctx, "/front.admin.v1.Pms/ProductUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductDelete(ctx context.Context, in *ProductDeleteReq, opts ...grpc.CallOption) (*ProductDeleteResp, error) {
	out := new(ProductDeleteResp)
	err := c.cc.Invoke(ctx, "/front.admin.v1.Pms/ProductDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) BrandAdd(ctx context.Context, in *BrandAddReq, opts ...grpc.CallOption) (*BrandAddResp, error) {
	out := new(BrandAddResp)
	err := c.cc.Invoke(ctx, "/front.admin.v1.Pms/BrandAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) BrandList(ctx context.Context, in *BrandListReq, opts ...grpc.CallOption) (*BrandListResp, error) {
	out := new(BrandListResp)
	err := c.cc.Invoke(ctx, "/front.admin.v1.Pms/BrandList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) BrandUpdate(ctx context.Context, in *BrandUpdateReq, opts ...grpc.CallOption) (*BrandUpdateResp, error) {
	out := new(BrandUpdateResp)
	err := c.cc.Invoke(ctx, "/front.admin.v1.Pms/BrandUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) BrandDelete(ctx context.Context, in *BrandDeleteReq, opts ...grpc.CallOption) (*BrandDeleteResp, error) {
	out := new(BrandDeleteResp)
	err := c.cc.Invoke(ctx, "/front.admin.v1.Pms/BrandDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) CommentAdd(ctx context.Context, in *CommentAddReq, opts ...grpc.CallOption) (*CommentAddResp, error) {
	out := new(CommentAddResp)
	err := c.cc.Invoke(ctx, "/front.admin.v1.Pms/CommentAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) CommentList(ctx context.Context, in *CommentListReq, opts ...grpc.CallOption) (*CommentListResp, error) {
	out := new(CommentListResp)
	err := c.cc.Invoke(ctx, "/front.admin.v1.Pms/CommentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) CommentUpdate(ctx context.Context, in *CommentUpdateReq, opts ...grpc.CallOption) (*CommentUpdateResp, error) {
	out := new(CommentUpdateResp)
	err := c.cc.Invoke(ctx, "/front.admin.v1.Pms/CommentUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) CommentDelete(ctx context.Context, in *CommentDeleteReq, opts ...grpc.CallOption) (*CommentDeleteResp, error) {
	out := new(CommentDeleteResp)
	err := c.cc.Invoke(ctx, "/front.admin.v1.Pms/CommentDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) FeightTemplateAdd(ctx context.Context, in *FeightTemplateAddReq, opts ...grpc.CallOption) (*FeightTemplateAddResp, error) {
	out := new(FeightTemplateAddResp)
	err := c.cc.Invoke(ctx, "/front.admin.v1.Pms/FeightTemplateAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) FeightTemplateList(ctx context.Context, in *FeightTemplateListReq, opts ...grpc.CallOption) (*FeightTemplateListResp, error) {
	out := new(FeightTemplateListResp)
	err := c.cc.Invoke(ctx, "/front.admin.v1.Pms/FeightTemplateList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) FeightTemplateUpdate(ctx context.Context, in *FeightTemplateUpdateReq, opts ...grpc.CallOption) (*FeightTemplateUpdateResp, error) {
	out := new(FeightTemplateUpdateResp)
	err := c.cc.Invoke(ctx, "/front.admin.v1.Pms/FeightTemplateUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) FeightTemplateDelete(ctx context.Context, in *FeightTemplateDeleteReq, opts ...grpc.CallOption) (*FeightTemplateDeleteResp, error) {
	out := new(FeightTemplateDeleteResp)
	err := c.cc.Invoke(ctx, "/front.admin.v1.Pms/FeightTemplateDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) MemberPriceAdd(ctx context.Context, in *MemberPriceAddReq, opts ...grpc.CallOption) (*MemberPriceAddResp, error) {
	out := new(MemberPriceAddResp)
	err := c.cc.Invoke(ctx, "/front.admin.v1.Pms/MemberPriceAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) MemberPriceList(ctx context.Context, in *MemberPriceListReq, opts ...grpc.CallOption) (*MemberPriceListResp, error) {
	out := new(MemberPriceListResp)
	err := c.cc.Invoke(ctx, "/front.admin.v1.Pms/MemberPriceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) MemberPriceUpdate(ctx context.Context, in *MemberPriceUpdateReq, opts ...grpc.CallOption) (*MemberPriceUpdateResp, error) {
	out := new(MemberPriceUpdateResp)
	err := c.cc.Invoke(ctx, "/front.admin.v1.Pms/MemberPriceUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) MemberPriceDelete(ctx context.Context, in *MemberPriceDeleteReq, opts ...grpc.CallOption) (*MemberPriceDeleteResp, error) {
	out := new(MemberPriceDeleteResp)
	err := c.cc.Invoke(ctx, "/front.admin.v1.Pms/MemberPriceDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductCategoryAdd(ctx context.Context, in *ProductCategoryAddReq, opts ...grpc.CallOption) (*ProductCategoryAddResp, error) {
	out := new(ProductCategoryAddResp)
	err := c.cc.Invoke(ctx, "/front.admin.v1.Pms/ProductCategoryAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductCategoryList(ctx context.Context, in *ProductCategoryListReq, opts ...grpc.CallOption) (*ProductCategoryListResp, error) {
	out := new(ProductCategoryListResp)
	err := c.cc.Invoke(ctx, "/front.admin.v1.Pms/ProductCategoryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductCategoryUpdate(ctx context.Context, in *ProductCategoryUpdateReq, opts ...grpc.CallOption) (*ProductCategoryUpdateResp, error) {
	out := new(ProductCategoryUpdateResp)
	err := c.cc.Invoke(ctx, "/front.admin.v1.Pms/ProductCategoryUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductCategoryDelete(ctx context.Context, in *ProductCategoryDeleteReq, opts ...grpc.CallOption) (*ProductCategoryDeleteResp, error) {
	out := new(ProductCategoryDeleteResp)
	err := c.cc.Invoke(ctx, "/front.admin.v1.Pms/ProductCategoryDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) SkuStockAdd(ctx context.Context, in *SkuStockAddReq, opts ...grpc.CallOption) (*SkuStockAddResp, error) {
	out := new(SkuStockAddResp)
	err := c.cc.Invoke(ctx, "/front.admin.v1.Pms/SkuStockAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) SkuStockList(ctx context.Context, in *SkuStockListReq, opts ...grpc.CallOption) (*SkuStockListResp, error) {
	out := new(SkuStockListResp)
	err := c.cc.Invoke(ctx, "/front.admin.v1.Pms/SkuStockList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) SkuStockUpdate(ctx context.Context, in *SkuStockUpdateReq, opts ...grpc.CallOption) (*SkuStockUpdateResp, error) {
	out := new(SkuStockUpdateResp)
	err := c.cc.Invoke(ctx, "/front.admin.v1.Pms/SkuStockUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) SkuStockDelete(ctx context.Context, in *SkuStockDeleteReq, opts ...grpc.CallOption) (*SkuStockDeleteResp, error) {
	out := new(SkuStockDeleteResp)
	err := c.cc.Invoke(ctx, "/front.admin.v1.Pms/SkuStockDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PmsServer is the server API for Pms service.
// All implementations must embed UnimplementedPmsServer
// for forward compatibility
type PmsServer interface {
	ProductAdd(context.Context, *ProductAddReq) (*ProductAddResp, error)
	ProductList(context.Context, *ProductListReq) (*ProductListResp, error)
	ProductUpdate(context.Context, *ProductUpdateReq) (*ProductUpdateResp, error)
	ProductDelete(context.Context, *ProductDeleteReq) (*ProductDeleteResp, error)
	BrandAdd(context.Context, *BrandAddReq) (*BrandAddResp, error)
	BrandList(context.Context, *BrandListReq) (*BrandListResp, error)
	BrandUpdate(context.Context, *BrandUpdateReq) (*BrandUpdateResp, error)
	BrandDelete(context.Context, *BrandDeleteReq) (*BrandDeleteResp, error)
	CommentAdd(context.Context, *CommentAddReq) (*CommentAddResp, error)
	CommentList(context.Context, *CommentListReq) (*CommentListResp, error)
	CommentUpdate(context.Context, *CommentUpdateReq) (*CommentUpdateResp, error)
	CommentDelete(context.Context, *CommentDeleteReq) (*CommentDeleteResp, error)
	FeightTemplateAdd(context.Context, *FeightTemplateAddReq) (*FeightTemplateAddResp, error)
	FeightTemplateList(context.Context, *FeightTemplateListReq) (*FeightTemplateListResp, error)
	FeightTemplateUpdate(context.Context, *FeightTemplateUpdateReq) (*FeightTemplateUpdateResp, error)
	FeightTemplateDelete(context.Context, *FeightTemplateDeleteReq) (*FeightTemplateDeleteResp, error)
	MemberPriceAdd(context.Context, *MemberPriceAddReq) (*MemberPriceAddResp, error)
	MemberPriceList(context.Context, *MemberPriceListReq) (*MemberPriceListResp, error)
	MemberPriceUpdate(context.Context, *MemberPriceUpdateReq) (*MemberPriceUpdateResp, error)
	MemberPriceDelete(context.Context, *MemberPriceDeleteReq) (*MemberPriceDeleteResp, error)
	ProductCategoryAdd(context.Context, *ProductCategoryAddReq) (*ProductCategoryAddResp, error)
	ProductCategoryList(context.Context, *ProductCategoryListReq) (*ProductCategoryListResp, error)
	ProductCategoryUpdate(context.Context, *ProductCategoryUpdateReq) (*ProductCategoryUpdateResp, error)
	ProductCategoryDelete(context.Context, *ProductCategoryDeleteReq) (*ProductCategoryDeleteResp, error)
	SkuStockAdd(context.Context, *SkuStockAddReq) (*SkuStockAddResp, error)
	SkuStockList(context.Context, *SkuStockListReq) (*SkuStockListResp, error)
	SkuStockUpdate(context.Context, *SkuStockUpdateReq) (*SkuStockUpdateResp, error)
	SkuStockDelete(context.Context, *SkuStockDeleteReq) (*SkuStockDeleteResp, error)
	mustEmbedUnimplementedPmsServer()
}

// UnimplementedPmsServer must be embedded to have forward compatible implementations.
type UnimplementedPmsServer struct {
}

func (UnimplementedPmsServer) ProductAdd(context.Context, *ProductAddReq) (*ProductAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAdd not implemented")
}
func (UnimplementedPmsServer) ProductList(context.Context, *ProductListReq) (*ProductListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductList not implemented")
}
func (UnimplementedPmsServer) ProductUpdate(context.Context, *ProductUpdateReq) (*ProductUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductUpdate not implemented")
}
func (UnimplementedPmsServer) ProductDelete(context.Context, *ProductDeleteReq) (*ProductDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductDelete not implemented")
}
func (UnimplementedPmsServer) BrandAdd(context.Context, *BrandAddReq) (*BrandAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrandAdd not implemented")
}
func (UnimplementedPmsServer) BrandList(context.Context, *BrandListReq) (*BrandListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrandList not implemented")
}
func (UnimplementedPmsServer) BrandUpdate(context.Context, *BrandUpdateReq) (*BrandUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrandUpdate not implemented")
}
func (UnimplementedPmsServer) BrandDelete(context.Context, *BrandDeleteReq) (*BrandDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrandDelete not implemented")
}
func (UnimplementedPmsServer) CommentAdd(context.Context, *CommentAddReq) (*CommentAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentAdd not implemented")
}
func (UnimplementedPmsServer) CommentList(context.Context, *CommentListReq) (*CommentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentList not implemented")
}
func (UnimplementedPmsServer) CommentUpdate(context.Context, *CommentUpdateReq) (*CommentUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentUpdate not implemented")
}
func (UnimplementedPmsServer) CommentDelete(context.Context, *CommentDeleteReq) (*CommentDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentDelete not implemented")
}
func (UnimplementedPmsServer) FeightTemplateAdd(context.Context, *FeightTemplateAddReq) (*FeightTemplateAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeightTemplateAdd not implemented")
}
func (UnimplementedPmsServer) FeightTemplateList(context.Context, *FeightTemplateListReq) (*FeightTemplateListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeightTemplateList not implemented")
}
func (UnimplementedPmsServer) FeightTemplateUpdate(context.Context, *FeightTemplateUpdateReq) (*FeightTemplateUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeightTemplateUpdate not implemented")
}
func (UnimplementedPmsServer) FeightTemplateDelete(context.Context, *FeightTemplateDeleteReq) (*FeightTemplateDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeightTemplateDelete not implemented")
}
func (UnimplementedPmsServer) MemberPriceAdd(context.Context, *MemberPriceAddReq) (*MemberPriceAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberPriceAdd not implemented")
}
func (UnimplementedPmsServer) MemberPriceList(context.Context, *MemberPriceListReq) (*MemberPriceListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberPriceList not implemented")
}
func (UnimplementedPmsServer) MemberPriceUpdate(context.Context, *MemberPriceUpdateReq) (*MemberPriceUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberPriceUpdate not implemented")
}
func (UnimplementedPmsServer) MemberPriceDelete(context.Context, *MemberPriceDeleteReq) (*MemberPriceDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberPriceDelete not implemented")
}
func (UnimplementedPmsServer) ProductCategoryAdd(context.Context, *ProductCategoryAddReq) (*ProductCategoryAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryAdd not implemented")
}
func (UnimplementedPmsServer) ProductCategoryList(context.Context, *ProductCategoryListReq) (*ProductCategoryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryList not implemented")
}
func (UnimplementedPmsServer) ProductCategoryUpdate(context.Context, *ProductCategoryUpdateReq) (*ProductCategoryUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryUpdate not implemented")
}
func (UnimplementedPmsServer) ProductCategoryDelete(context.Context, *ProductCategoryDeleteReq) (*ProductCategoryDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryDelete not implemented")
}
func (UnimplementedPmsServer) SkuStockAdd(context.Context, *SkuStockAddReq) (*SkuStockAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkuStockAdd not implemented")
}
func (UnimplementedPmsServer) SkuStockList(context.Context, *SkuStockListReq) (*SkuStockListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkuStockList not implemented")
}
func (UnimplementedPmsServer) SkuStockUpdate(context.Context, *SkuStockUpdateReq) (*SkuStockUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkuStockUpdate not implemented")
}
func (UnimplementedPmsServer) SkuStockDelete(context.Context, *SkuStockDeleteReq) (*SkuStockDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkuStockDelete not implemented")
}
func (UnimplementedPmsServer) mustEmbedUnimplementedPmsServer() {}

// UnsafePmsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PmsServer will
// result in compilation errors.
type UnsafePmsServer interface {
	mustEmbedUnimplementedPmsServer()
}

func RegisterPmsServer(s grpc.ServiceRegistrar, srv PmsServer) {
	s.RegisterService(&Pms_ServiceDesc, srv)
}

func _Pms_ProductAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/front.admin.v1.Pms/ProductAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductAdd(ctx, req.(*ProductAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/front.admin.v1.Pms/ProductList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductList(ctx, req.(*ProductListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/front.admin.v1.Pms/ProductUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductUpdate(ctx, req.(*ProductUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/front.admin.v1.Pms/ProductDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductDelete(ctx, req.(*ProductDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_BrandAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).BrandAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/front.admin.v1.Pms/BrandAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).BrandAdd(ctx, req.(*BrandAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_BrandList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).BrandList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/front.admin.v1.Pms/BrandList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).BrandList(ctx, req.(*BrandListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_BrandUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).BrandUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/front.admin.v1.Pms/BrandUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).BrandUpdate(ctx, req.(*BrandUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_BrandDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).BrandDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/front.admin.v1.Pms/BrandDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).BrandDelete(ctx, req.(*BrandDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_CommentAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).CommentAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/front.admin.v1.Pms/CommentAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).CommentAdd(ctx, req.(*CommentAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_CommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).CommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/front.admin.v1.Pms/CommentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).CommentList(ctx, req.(*CommentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_CommentUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).CommentUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/front.admin.v1.Pms/CommentUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).CommentUpdate(ctx, req.(*CommentUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_CommentDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).CommentDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/front.admin.v1.Pms/CommentDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).CommentDelete(ctx, req.(*CommentDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_FeightTemplateAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeightTemplateAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).FeightTemplateAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/front.admin.v1.Pms/FeightTemplateAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).FeightTemplateAdd(ctx, req.(*FeightTemplateAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_FeightTemplateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeightTemplateListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).FeightTemplateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/front.admin.v1.Pms/FeightTemplateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).FeightTemplateList(ctx, req.(*FeightTemplateListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_FeightTemplateUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeightTemplateUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).FeightTemplateUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/front.admin.v1.Pms/FeightTemplateUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).FeightTemplateUpdate(ctx, req.(*FeightTemplateUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_FeightTemplateDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeightTemplateDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).FeightTemplateDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/front.admin.v1.Pms/FeightTemplateDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).FeightTemplateDelete(ctx, req.(*FeightTemplateDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_MemberPriceAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberPriceAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).MemberPriceAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/front.admin.v1.Pms/MemberPriceAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).MemberPriceAdd(ctx, req.(*MemberPriceAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_MemberPriceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberPriceListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).MemberPriceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/front.admin.v1.Pms/MemberPriceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).MemberPriceList(ctx, req.(*MemberPriceListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_MemberPriceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberPriceUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).MemberPriceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/front.admin.v1.Pms/MemberPriceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).MemberPriceUpdate(ctx, req.(*MemberPriceUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_MemberPriceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberPriceDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).MemberPriceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/front.admin.v1.Pms/MemberPriceDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).MemberPriceDelete(ctx, req.(*MemberPriceDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductCategoryAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductCategoryAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/front.admin.v1.Pms/ProductCategoryAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductCategoryAdd(ctx, req.(*ProductCategoryAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/front.admin.v1.Pms/ProductCategoryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductCategoryList(ctx, req.(*ProductCategoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductCategoryUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductCategoryUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/front.admin.v1.Pms/ProductCategoryUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductCategoryUpdate(ctx, req.(*ProductCategoryUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductCategoryDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductCategoryDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/front.admin.v1.Pms/ProductCategoryDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductCategoryDelete(ctx, req.(*ProductCategoryDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_SkuStockAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkuStockAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).SkuStockAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/front.admin.v1.Pms/SkuStockAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).SkuStockAdd(ctx, req.(*SkuStockAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_SkuStockList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkuStockListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).SkuStockList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/front.admin.v1.Pms/SkuStockList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).SkuStockList(ctx, req.(*SkuStockListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_SkuStockUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkuStockUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).SkuStockUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/front.admin.v1.Pms/SkuStockUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).SkuStockUpdate(ctx, req.(*SkuStockUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_SkuStockDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkuStockDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).SkuStockDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/front.admin.v1.Pms/SkuStockDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).SkuStockDelete(ctx, req.(*SkuStockDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Pms_ServiceDesc is the grpc.ServiceDesc for Pms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "front.admin.v1.Pms",
	HandlerType: (*PmsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProductAdd",
			Handler:    _Pms_ProductAdd_Handler,
		},
		{
			MethodName: "ProductList",
			Handler:    _Pms_ProductList_Handler,
		},
		{
			MethodName: "ProductUpdate",
			Handler:    _Pms_ProductUpdate_Handler,
		},
		{
			MethodName: "ProductDelete",
			Handler:    _Pms_ProductDelete_Handler,
		},
		{
			MethodName: "BrandAdd",
			Handler:    _Pms_BrandAdd_Handler,
		},
		{
			MethodName: "BrandList",
			Handler:    _Pms_BrandList_Handler,
		},
		{
			MethodName: "BrandUpdate",
			Handler:    _Pms_BrandUpdate_Handler,
		},
		{
			MethodName: "BrandDelete",
			Handler:    _Pms_BrandDelete_Handler,
		},
		{
			MethodName: "CommentAdd",
			Handler:    _Pms_CommentAdd_Handler,
		},
		{
			MethodName: "CommentList",
			Handler:    _Pms_CommentList_Handler,
		},
		{
			MethodName: "CommentUpdate",
			Handler:    _Pms_CommentUpdate_Handler,
		},
		{
			MethodName: "CommentDelete",
			Handler:    _Pms_CommentDelete_Handler,
		},
		{
			MethodName: "FeightTemplateAdd",
			Handler:    _Pms_FeightTemplateAdd_Handler,
		},
		{
			MethodName: "FeightTemplateList",
			Handler:    _Pms_FeightTemplateList_Handler,
		},
		{
			MethodName: "FeightTemplateUpdate",
			Handler:    _Pms_FeightTemplateUpdate_Handler,
		},
		{
			MethodName: "FeightTemplateDelete",
			Handler:    _Pms_FeightTemplateDelete_Handler,
		},
		{
			MethodName: "MemberPriceAdd",
			Handler:    _Pms_MemberPriceAdd_Handler,
		},
		{
			MethodName: "MemberPriceList",
			Handler:    _Pms_MemberPriceList_Handler,
		},
		{
			MethodName: "MemberPriceUpdate",
			Handler:    _Pms_MemberPriceUpdate_Handler,
		},
		{
			MethodName: "MemberPriceDelete",
			Handler:    _Pms_MemberPriceDelete_Handler,
		},
		{
			MethodName: "ProductCategoryAdd",
			Handler:    _Pms_ProductCategoryAdd_Handler,
		},
		{
			MethodName: "ProductCategoryList",
			Handler:    _Pms_ProductCategoryList_Handler,
		},
		{
			MethodName: "ProductCategoryUpdate",
			Handler:    _Pms_ProductCategoryUpdate_Handler,
		},
		{
			MethodName: "ProductCategoryDelete",
			Handler:    _Pms_ProductCategoryDelete_Handler,
		},
		{
			MethodName: "SkuStockAdd",
			Handler:    _Pms_SkuStockAdd_Handler,
		},
		{
			MethodName: "SkuStockList",
			Handler:    _Pms_SkuStockList_Handler,
		},
		{
			MethodName: "SkuStockUpdate",
			Handler:    _Pms_SkuStockUpdate_Handler,
		},
		{
			MethodName: "SkuStockDelete",
			Handler:    _Pms_SkuStockDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/front/admin/v1/pms.proto",
}
