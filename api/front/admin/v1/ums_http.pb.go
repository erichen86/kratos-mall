// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.0

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type UmsHTTPServer interface {
	GrowthChangeHistoryAdd(context.Context, *GrowthChangeHistoryAddReq) (*GrowthChangeHistoryAddResp, error)
	GrowthChangeHistoryDelete(context.Context, *GrowthChangeHistoryDeleteReq) (*GrowthChangeHistoryDeleteResp, error)
	GrowthChangeHistoryList(context.Context, *GrowthChangeHistoryListReq) (*GrowthChangeHistoryListResp, error)
	GrowthChangeHistoryUpdate(context.Context, *GrowthChangeHistoryUpdateReq) (*GrowthChangeHistoryUpdateResp, error)
	IntegrationChangeHistoryAdd(context.Context, *IntegrationChangeHistoryAddReq) (*IntegrationChangeHistoryAddResp, error)
	IntegrationChangeHistoryDelete(context.Context, *IntegrationChangeHistoryDeleteReq) (*IntegrationChangeHistoryDeleteResp, error)
	IntegrationChangeHistoryList(context.Context, *IntegrationChangeHistoryListReq) (*IntegrationChangeHistoryListResp, error)
	IntegrationChangeHistoryUpdate(context.Context, *IntegrationChangeHistoryUpdateReq) (*IntegrationChangeHistoryUpdateResp, error)
	IntegrationConsumeSettingAdd(context.Context, *IntegrationConsumeSettingAddReq) (*IntegrationConsumeSettingAddResp, error)
	IntegrationConsumeSettingDelete(context.Context, *IntegrationConsumeSettingDeleteReq) (*IntegrationConsumeSettingDeleteResp, error)
	IntegrationConsumeSettingList(context.Context, *IntegrationConsumeSettingListReq) (*IntegrationConsumeSettingListResp, error)
	IntegrationConsumeSettingUpdate(context.Context, *IntegrationConsumeSettingUpdateReq) (*IntegrationConsumeSettingUpdateResp, error)
	MemberAdd(context.Context, *MemberAddReq) (*MemberAddResp, error)
	MemberDelete(context.Context, *MemberDeleteReq) (*MemberDeleteResp, error)
	MemberLevelAdd(context.Context, *MemberLevelAddReq) (*MemberLevelAddResp, error)
	MemberLevelDelete(context.Context, *MemberLevelDeleteReq) (*MemberLevelDeleteResp, error)
	MemberLevelList(context.Context, *MemberLevelListReq) (*MemberLevelListResp, error)
	MemberLevelUpdate(context.Context, *MemberLevelUpdateReq) (*MemberLevelUpdateResp, error)
	MemberList(context.Context, *MemberListReq) (*MemberListResp, error)
	MemberLoginLogAdd(context.Context, *MemberLoginLogAddReq) (*MemberLoginLogAddResp, error)
	MemberLoginLogDelete(context.Context, *MemberLoginLogDeleteReq) (*MemberLoginLogDeleteResp, error)
	MemberLoginLogList(context.Context, *MemberLoginLogListReq) (*MemberLoginLogListResp, error)
	MemberLoginLogUpdate(context.Context, *MemberLoginLogUpdateReq) (*MemberLoginLogUpdateResp, error)
	MemberReceiveAddressAdd(context.Context, *MemberReceiveAddressAddReq) (*MemberReceiveAddressAddResp, error)
	MemberReceiveAddressDelete(context.Context, *MemberReceiveAddressDeleteReq) (*MemberReceiveAddressDeleteResp, error)
	MemberReceiveAddressList(context.Context, *MemberReceiveAddressListReq) (*MemberReceiveAddressListResp, error)
	MemberReceiveAddressUpdate(context.Context, *MemberReceiveAddressUpdateReq) (*MemberReceiveAddressUpdateResp, error)
	MemberRuleSettingAdd(context.Context, *MemberRuleSettingAddReq) (*MemberRuleSettingAddResp, error)
	MemberRuleSettingDelete(context.Context, *MemberRuleSettingDeleteReq) (*MemberRuleSettingDeleteResp, error)
	MemberRuleSettingList(context.Context, *MemberRuleSettingListReq) (*MemberRuleSettingListResp, error)
	MemberRuleSettingUpdate(context.Context, *MemberRuleSettingUpdateReq) (*MemberRuleSettingUpdateResp, error)
	MemberStatisticsInfoAdd(context.Context, *MemberStatisticsInfoAddReq) (*MemberStatisticsInfoAddResp, error)
	MemberStatisticsInfoDelete(context.Context, *MemberStatisticsInfoDeleteReq) (*MemberStatisticsInfoDeleteResp, error)
	MemberStatisticsInfoList(context.Context, *MemberStatisticsInfoListReq) (*MemberStatisticsInfoListResp, error)
	MemberStatisticsInfoUpdate(context.Context, *MemberStatisticsInfoUpdateReq) (*MemberStatisticsInfoUpdateResp, error)
	MemberTagAdd(context.Context, *MemberTagAddReq) (*MemberTagAddResp, error)
	MemberTagDelete(context.Context, *MemberTagDeleteReq) (*MemberTagDeleteResp, error)
	MemberTagList(context.Context, *MemberTagListReq) (*MemberTagListResp, error)
	MemberTagUpdate(context.Context, *MemberTagUpdateReq) (*MemberTagUpdateResp, error)
	MemberTaskAdd(context.Context, *MemberTaskAddReq) (*MemberTaskAddResp, error)
	MemberTaskDelete(context.Context, *MemberTaskDeleteReq) (*MemberTaskDeleteResp, error)
	MemberTaskList(context.Context, *MemberTaskListReq) (*MemberTaskListResp, error)
	MemberTaskUpdate(context.Context, *MemberTaskUpdateReq) (*MemberTaskUpdateResp, error)
	MemberUpdate(context.Context, *MemberUpdateReq) (*MemberUpdateResp, error)
}

func RegisterUmsHTTPServer(s *http.Server, srv UmsHTTPServer) {
	r := s.Route("/")
	r.POST("/api/member/member/add", _Ums_MemberAdd0_HTTP_Handler(srv))
	r.POST("/api/member/member/list", _Ums_MemberList0_HTTP_Handler(srv))
	r.POST("/api/member/member/update", _Ums_MemberUpdate0_HTTP_Handler(srv))
	r.POST("/api/member/member/delete", _Ums_MemberDelete0_HTTP_Handler(srv))
	r.POST("/api/member/growthchangehistory/add", _Ums_GrowthChangeHistoryAdd0_HTTP_Handler(srv))
	r.POST("/api/member/growthchangehistory/list", _Ums_GrowthChangeHistoryList0_HTTP_Handler(srv))
	r.POST("/api/member/growthchangehistory/update", _Ums_GrowthChangeHistoryUpdate0_HTTP_Handler(srv))
	r.POST("/api/member/growthchangehistory/delete", _Ums_GrowthChangeHistoryDelete0_HTTP_Handler(srv))
	r.POST("/api/member/integrationchangehistory/add", _Ums_IntegrationChangeHistoryAdd0_HTTP_Handler(srv))
	r.POST("/api/member/integrationchangehistory/list", _Ums_IntegrationChangeHistoryList0_HTTP_Handler(srv))
	r.POST("/api/member/integrationchangehistory/update", _Ums_IntegrationChangeHistoryUpdate0_HTTP_Handler(srv))
	r.POST("/api/member/integrationchangehistory/delete", _Ums_IntegrationChangeHistoryDelete0_HTTP_Handler(srv))
	r.POST("/api/member/integrationconsumesetting/add", _Ums_IntegrationConsumeSettingAdd0_HTTP_Handler(srv))
	r.POST("/api/member/integrationconsumesetting/list", _Ums_IntegrationConsumeSettingList0_HTTP_Handler(srv))
	r.POST("/api/member/integrationconsumesetting/update", _Ums_IntegrationConsumeSettingUpdate0_HTTP_Handler(srv))
	r.POST("/api/member/integrationconsumesetting/delete", _Ums_IntegrationConsumeSettingDelete0_HTTP_Handler(srv))
	r.POST("/api/member/level/add", _Ums_MemberLevelAdd0_HTTP_Handler(srv))
	r.POST("/api/member/level/list", _Ums_MemberLevelList0_HTTP_Handler(srv))
	r.POST("/api/member/level/update", _Ums_MemberLevelUpdate0_HTTP_Handler(srv))
	r.POST("/api/member/level/delete", _Ums_MemberLevelDelete0_HTTP_Handler(srv))
	r.POST("/api/member/loginlog/add", _Ums_MemberLoginLogAdd0_HTTP_Handler(srv))
	r.POST("/api/member/loginlog/list", _Ums_MemberLoginLogList0_HTTP_Handler(srv))
	r.POST("/api/member/loginlog/update", _Ums_MemberLoginLogUpdate0_HTTP_Handler(srv))
	r.POST("/api/member/loginlog/delete", _Ums_MemberLoginLogDelete0_HTTP_Handler(srv))
	r.POST("/api/member/address/add", _Ums_MemberReceiveAddressAdd0_HTTP_Handler(srv))
	r.POST("/api/member/address/list", _Ums_MemberReceiveAddressList0_HTTP_Handler(srv))
	r.POST("/api/member/address/update", _Ums_MemberReceiveAddressUpdate0_HTTP_Handler(srv))
	r.POST("/api/member/address/delete", _Ums_MemberReceiveAddressDelete0_HTTP_Handler(srv))
	r.POST("/api/member/rulesetting/add", _Ums_MemberRuleSettingAdd0_HTTP_Handler(srv))
	r.POST("/api/member/rulesetting/list", _Ums_MemberRuleSettingList0_HTTP_Handler(srv))
	r.POST("/api/member/rulesetting/update", _Ums_MemberRuleSettingUpdate0_HTTP_Handler(srv))
	r.POST("/api/member/rulesetting/delete", _Ums_MemberRuleSettingDelete0_HTTP_Handler(srv))
	r.POST("/api/member/statistics/add", _Ums_MemberStatisticsInfoAdd0_HTTP_Handler(srv))
	r.POST("/api/member/statistics/list", _Ums_MemberStatisticsInfoList0_HTTP_Handler(srv))
	r.POST("/api/member/statistics/update", _Ums_MemberStatisticsInfoUpdate0_HTTP_Handler(srv))
	r.POST("/api/member/statistics/delete", _Ums_MemberStatisticsInfoDelete0_HTTP_Handler(srv))
	r.POST("/api/member/tag/add", _Ums_MemberTagAdd0_HTTP_Handler(srv))
	r.POST("/api/member/tag/list", _Ums_MemberTagList0_HTTP_Handler(srv))
	r.POST("/api/member/tag/update", _Ums_MemberTagUpdate0_HTTP_Handler(srv))
	r.POST("/api/member/tag/delete", _Ums_MemberTagDelete0_HTTP_Handler(srv))
	r.POST("/api/member/task/add", _Ums_MemberTaskAdd0_HTTP_Handler(srv))
	r.POST("/api/member/task/list", _Ums_MemberTaskList0_HTTP_Handler(srv))
	r.POST("/api/member/task/update", _Ums_MemberTaskUpdate0_HTTP_Handler(srv))
	r.POST("/api/member/task/delete", _Ums_MemberTaskDelete0_HTTP_Handler(srv))
}

func _Ums_MemberAdd0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberAdd(ctx, req.(*MemberAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberAddResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_MemberList0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberList(ctx, req.(*MemberListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberListResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_MemberUpdate0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberUpdate(ctx, req.(*MemberUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_MemberDelete0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberDelete(ctx, req.(*MemberDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_GrowthChangeHistoryAdd0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GrowthChangeHistoryAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/GrowthChangeHistoryAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GrowthChangeHistoryAdd(ctx, req.(*GrowthChangeHistoryAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GrowthChangeHistoryAddResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_GrowthChangeHistoryList0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GrowthChangeHistoryListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/GrowthChangeHistoryList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GrowthChangeHistoryList(ctx, req.(*GrowthChangeHistoryListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GrowthChangeHistoryListResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_GrowthChangeHistoryUpdate0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GrowthChangeHistoryUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/GrowthChangeHistoryUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GrowthChangeHistoryUpdate(ctx, req.(*GrowthChangeHistoryUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GrowthChangeHistoryUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_GrowthChangeHistoryDelete0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GrowthChangeHistoryDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/GrowthChangeHistoryDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GrowthChangeHistoryDelete(ctx, req.(*GrowthChangeHistoryDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GrowthChangeHistoryDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_IntegrationChangeHistoryAdd0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IntegrationChangeHistoryAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/IntegrationChangeHistoryAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.IntegrationChangeHistoryAdd(ctx, req.(*IntegrationChangeHistoryAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*IntegrationChangeHistoryAddResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_IntegrationChangeHistoryList0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IntegrationChangeHistoryListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/IntegrationChangeHistoryList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.IntegrationChangeHistoryList(ctx, req.(*IntegrationChangeHistoryListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*IntegrationChangeHistoryListResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_IntegrationChangeHistoryUpdate0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IntegrationChangeHistoryUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/IntegrationChangeHistoryUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.IntegrationChangeHistoryUpdate(ctx, req.(*IntegrationChangeHistoryUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*IntegrationChangeHistoryUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_IntegrationChangeHistoryDelete0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IntegrationChangeHistoryDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/IntegrationChangeHistoryDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.IntegrationChangeHistoryDelete(ctx, req.(*IntegrationChangeHistoryDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*IntegrationChangeHistoryDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_IntegrationConsumeSettingAdd0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IntegrationConsumeSettingAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/IntegrationConsumeSettingAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.IntegrationConsumeSettingAdd(ctx, req.(*IntegrationConsumeSettingAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*IntegrationConsumeSettingAddResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_IntegrationConsumeSettingList0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IntegrationConsumeSettingListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/IntegrationConsumeSettingList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.IntegrationConsumeSettingList(ctx, req.(*IntegrationConsumeSettingListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*IntegrationConsumeSettingListResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_IntegrationConsumeSettingUpdate0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IntegrationConsumeSettingUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/IntegrationConsumeSettingUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.IntegrationConsumeSettingUpdate(ctx, req.(*IntegrationConsumeSettingUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*IntegrationConsumeSettingUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_IntegrationConsumeSettingDelete0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IntegrationConsumeSettingDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/IntegrationConsumeSettingDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.IntegrationConsumeSettingDelete(ctx, req.(*IntegrationConsumeSettingDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*IntegrationConsumeSettingDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_MemberLevelAdd0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberLevelAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberLevelAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberLevelAdd(ctx, req.(*MemberLevelAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberLevelAddResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_MemberLevelList0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberLevelListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberLevelList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberLevelList(ctx, req.(*MemberLevelListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberLevelListResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_MemberLevelUpdate0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberLevelUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberLevelUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberLevelUpdate(ctx, req.(*MemberLevelUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberLevelUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_MemberLevelDelete0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberLevelDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberLevelDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberLevelDelete(ctx, req.(*MemberLevelDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberLevelDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_MemberLoginLogAdd0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberLoginLogAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberLoginLogAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberLoginLogAdd(ctx, req.(*MemberLoginLogAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberLoginLogAddResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_MemberLoginLogList0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberLoginLogListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberLoginLogList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberLoginLogList(ctx, req.(*MemberLoginLogListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberLoginLogListResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_MemberLoginLogUpdate0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberLoginLogUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberLoginLogUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberLoginLogUpdate(ctx, req.(*MemberLoginLogUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberLoginLogUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_MemberLoginLogDelete0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberLoginLogDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberLoginLogDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberLoginLogDelete(ctx, req.(*MemberLoginLogDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberLoginLogDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_MemberReceiveAddressAdd0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberReceiveAddressAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberReceiveAddressAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberReceiveAddressAdd(ctx, req.(*MemberReceiveAddressAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberReceiveAddressAddResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_MemberReceiveAddressList0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberReceiveAddressListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberReceiveAddressList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberReceiveAddressList(ctx, req.(*MemberReceiveAddressListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberReceiveAddressListResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_MemberReceiveAddressUpdate0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberReceiveAddressUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberReceiveAddressUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberReceiveAddressUpdate(ctx, req.(*MemberReceiveAddressUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberReceiveAddressUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_MemberReceiveAddressDelete0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberReceiveAddressDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberReceiveAddressDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberReceiveAddressDelete(ctx, req.(*MemberReceiveAddressDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberReceiveAddressDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_MemberRuleSettingAdd0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberRuleSettingAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberRuleSettingAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberRuleSettingAdd(ctx, req.(*MemberRuleSettingAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberRuleSettingAddResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_MemberRuleSettingList0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberRuleSettingListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberRuleSettingList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberRuleSettingList(ctx, req.(*MemberRuleSettingListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberRuleSettingListResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_MemberRuleSettingUpdate0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberRuleSettingUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberRuleSettingUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberRuleSettingUpdate(ctx, req.(*MemberRuleSettingUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberRuleSettingUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_MemberRuleSettingDelete0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberRuleSettingDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberRuleSettingDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberRuleSettingDelete(ctx, req.(*MemberRuleSettingDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberRuleSettingDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_MemberStatisticsInfoAdd0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberStatisticsInfoAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberStatisticsInfoAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberStatisticsInfoAdd(ctx, req.(*MemberStatisticsInfoAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberStatisticsInfoAddResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_MemberStatisticsInfoList0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberStatisticsInfoListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberStatisticsInfoList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberStatisticsInfoList(ctx, req.(*MemberStatisticsInfoListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberStatisticsInfoListResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_MemberStatisticsInfoUpdate0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberStatisticsInfoUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberStatisticsInfoUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberStatisticsInfoUpdate(ctx, req.(*MemberStatisticsInfoUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberStatisticsInfoUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_MemberStatisticsInfoDelete0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberStatisticsInfoDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberStatisticsInfoDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberStatisticsInfoDelete(ctx, req.(*MemberStatisticsInfoDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberStatisticsInfoDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_MemberTagAdd0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberTagAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberTagAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberTagAdd(ctx, req.(*MemberTagAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberTagAddResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_MemberTagList0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberTagListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberTagList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberTagList(ctx, req.(*MemberTagListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberTagListResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_MemberTagUpdate0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberTagUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberTagUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberTagUpdate(ctx, req.(*MemberTagUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberTagUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_MemberTagDelete0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberTagDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberTagDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberTagDelete(ctx, req.(*MemberTagDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberTagDeleteResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_MemberTaskAdd0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberTaskAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberTaskAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberTaskAdd(ctx, req.(*MemberTaskAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberTaskAddResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_MemberTaskList0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberTaskListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberTaskList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberTaskList(ctx, req.(*MemberTaskListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberTaskListResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_MemberTaskUpdate0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberTaskUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberTaskUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberTaskUpdate(ctx, req.(*MemberTaskUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberTaskUpdateResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_MemberTaskDelete0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberTaskDeleteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/front.admin.v1.Ums/MemberTaskDelete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MemberTaskDelete(ctx, req.(*MemberTaskDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MemberTaskDeleteResp)
		return ctx.Result(200, reply)
	}
}

type UmsHTTPClient interface {
	GrowthChangeHistoryAdd(ctx context.Context, req *GrowthChangeHistoryAddReq, opts ...http.CallOption) (rsp *GrowthChangeHistoryAddResp, err error)
	GrowthChangeHistoryDelete(ctx context.Context, req *GrowthChangeHistoryDeleteReq, opts ...http.CallOption) (rsp *GrowthChangeHistoryDeleteResp, err error)
	GrowthChangeHistoryList(ctx context.Context, req *GrowthChangeHistoryListReq, opts ...http.CallOption) (rsp *GrowthChangeHistoryListResp, err error)
	GrowthChangeHistoryUpdate(ctx context.Context, req *GrowthChangeHistoryUpdateReq, opts ...http.CallOption) (rsp *GrowthChangeHistoryUpdateResp, err error)
	IntegrationChangeHistoryAdd(ctx context.Context, req *IntegrationChangeHistoryAddReq, opts ...http.CallOption) (rsp *IntegrationChangeHistoryAddResp, err error)
	IntegrationChangeHistoryDelete(ctx context.Context, req *IntegrationChangeHistoryDeleteReq, opts ...http.CallOption) (rsp *IntegrationChangeHistoryDeleteResp, err error)
	IntegrationChangeHistoryList(ctx context.Context, req *IntegrationChangeHistoryListReq, opts ...http.CallOption) (rsp *IntegrationChangeHistoryListResp, err error)
	IntegrationChangeHistoryUpdate(ctx context.Context, req *IntegrationChangeHistoryUpdateReq, opts ...http.CallOption) (rsp *IntegrationChangeHistoryUpdateResp, err error)
	IntegrationConsumeSettingAdd(ctx context.Context, req *IntegrationConsumeSettingAddReq, opts ...http.CallOption) (rsp *IntegrationConsumeSettingAddResp, err error)
	IntegrationConsumeSettingDelete(ctx context.Context, req *IntegrationConsumeSettingDeleteReq, opts ...http.CallOption) (rsp *IntegrationConsumeSettingDeleteResp, err error)
	IntegrationConsumeSettingList(ctx context.Context, req *IntegrationConsumeSettingListReq, opts ...http.CallOption) (rsp *IntegrationConsumeSettingListResp, err error)
	IntegrationConsumeSettingUpdate(ctx context.Context, req *IntegrationConsumeSettingUpdateReq, opts ...http.CallOption) (rsp *IntegrationConsumeSettingUpdateResp, err error)
	MemberAdd(ctx context.Context, req *MemberAddReq, opts ...http.CallOption) (rsp *MemberAddResp, err error)
	MemberDelete(ctx context.Context, req *MemberDeleteReq, opts ...http.CallOption) (rsp *MemberDeleteResp, err error)
	MemberLevelAdd(ctx context.Context, req *MemberLevelAddReq, opts ...http.CallOption) (rsp *MemberLevelAddResp, err error)
	MemberLevelDelete(ctx context.Context, req *MemberLevelDeleteReq, opts ...http.CallOption) (rsp *MemberLevelDeleteResp, err error)
	MemberLevelList(ctx context.Context, req *MemberLevelListReq, opts ...http.CallOption) (rsp *MemberLevelListResp, err error)
	MemberLevelUpdate(ctx context.Context, req *MemberLevelUpdateReq, opts ...http.CallOption) (rsp *MemberLevelUpdateResp, err error)
	MemberList(ctx context.Context, req *MemberListReq, opts ...http.CallOption) (rsp *MemberListResp, err error)
	MemberLoginLogAdd(ctx context.Context, req *MemberLoginLogAddReq, opts ...http.CallOption) (rsp *MemberLoginLogAddResp, err error)
	MemberLoginLogDelete(ctx context.Context, req *MemberLoginLogDeleteReq, opts ...http.CallOption) (rsp *MemberLoginLogDeleteResp, err error)
	MemberLoginLogList(ctx context.Context, req *MemberLoginLogListReq, opts ...http.CallOption) (rsp *MemberLoginLogListResp, err error)
	MemberLoginLogUpdate(ctx context.Context, req *MemberLoginLogUpdateReq, opts ...http.CallOption) (rsp *MemberLoginLogUpdateResp, err error)
	MemberReceiveAddressAdd(ctx context.Context, req *MemberReceiveAddressAddReq, opts ...http.CallOption) (rsp *MemberReceiveAddressAddResp, err error)
	MemberReceiveAddressDelete(ctx context.Context, req *MemberReceiveAddressDeleteReq, opts ...http.CallOption) (rsp *MemberReceiveAddressDeleteResp, err error)
	MemberReceiveAddressList(ctx context.Context, req *MemberReceiveAddressListReq, opts ...http.CallOption) (rsp *MemberReceiveAddressListResp, err error)
	MemberReceiveAddressUpdate(ctx context.Context, req *MemberReceiveAddressUpdateReq, opts ...http.CallOption) (rsp *MemberReceiveAddressUpdateResp, err error)
	MemberRuleSettingAdd(ctx context.Context, req *MemberRuleSettingAddReq, opts ...http.CallOption) (rsp *MemberRuleSettingAddResp, err error)
	MemberRuleSettingDelete(ctx context.Context, req *MemberRuleSettingDeleteReq, opts ...http.CallOption) (rsp *MemberRuleSettingDeleteResp, err error)
	MemberRuleSettingList(ctx context.Context, req *MemberRuleSettingListReq, opts ...http.CallOption) (rsp *MemberRuleSettingListResp, err error)
	MemberRuleSettingUpdate(ctx context.Context, req *MemberRuleSettingUpdateReq, opts ...http.CallOption) (rsp *MemberRuleSettingUpdateResp, err error)
	MemberStatisticsInfoAdd(ctx context.Context, req *MemberStatisticsInfoAddReq, opts ...http.CallOption) (rsp *MemberStatisticsInfoAddResp, err error)
	MemberStatisticsInfoDelete(ctx context.Context, req *MemberStatisticsInfoDeleteReq, opts ...http.CallOption) (rsp *MemberStatisticsInfoDeleteResp, err error)
	MemberStatisticsInfoList(ctx context.Context, req *MemberStatisticsInfoListReq, opts ...http.CallOption) (rsp *MemberStatisticsInfoListResp, err error)
	MemberStatisticsInfoUpdate(ctx context.Context, req *MemberStatisticsInfoUpdateReq, opts ...http.CallOption) (rsp *MemberStatisticsInfoUpdateResp, err error)
	MemberTagAdd(ctx context.Context, req *MemberTagAddReq, opts ...http.CallOption) (rsp *MemberTagAddResp, err error)
	MemberTagDelete(ctx context.Context, req *MemberTagDeleteReq, opts ...http.CallOption) (rsp *MemberTagDeleteResp, err error)
	MemberTagList(ctx context.Context, req *MemberTagListReq, opts ...http.CallOption) (rsp *MemberTagListResp, err error)
	MemberTagUpdate(ctx context.Context, req *MemberTagUpdateReq, opts ...http.CallOption) (rsp *MemberTagUpdateResp, err error)
	MemberTaskAdd(ctx context.Context, req *MemberTaskAddReq, opts ...http.CallOption) (rsp *MemberTaskAddResp, err error)
	MemberTaskDelete(ctx context.Context, req *MemberTaskDeleteReq, opts ...http.CallOption) (rsp *MemberTaskDeleteResp, err error)
	MemberTaskList(ctx context.Context, req *MemberTaskListReq, opts ...http.CallOption) (rsp *MemberTaskListResp, err error)
	MemberTaskUpdate(ctx context.Context, req *MemberTaskUpdateReq, opts ...http.CallOption) (rsp *MemberTaskUpdateResp, err error)
	MemberUpdate(ctx context.Context, req *MemberUpdateReq, opts ...http.CallOption) (rsp *MemberUpdateResp, err error)
}

type UmsHTTPClientImpl struct {
	cc *http.Client
}

func NewUmsHTTPClient(client *http.Client) UmsHTTPClient {
	return &UmsHTTPClientImpl{client}
}

func (c *UmsHTTPClientImpl) GrowthChangeHistoryAdd(ctx context.Context, in *GrowthChangeHistoryAddReq, opts ...http.CallOption) (*GrowthChangeHistoryAddResp, error) {
	var out GrowthChangeHistoryAddResp
	pattern := "/api/member/growthchangehistory/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/GrowthChangeHistoryAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) GrowthChangeHistoryDelete(ctx context.Context, in *GrowthChangeHistoryDeleteReq, opts ...http.CallOption) (*GrowthChangeHistoryDeleteResp, error) {
	var out GrowthChangeHistoryDeleteResp
	pattern := "/api/member/growthchangehistory/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/GrowthChangeHistoryDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) GrowthChangeHistoryList(ctx context.Context, in *GrowthChangeHistoryListReq, opts ...http.CallOption) (*GrowthChangeHistoryListResp, error) {
	var out GrowthChangeHistoryListResp
	pattern := "/api/member/growthchangehistory/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/GrowthChangeHistoryList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) GrowthChangeHistoryUpdate(ctx context.Context, in *GrowthChangeHistoryUpdateReq, opts ...http.CallOption) (*GrowthChangeHistoryUpdateResp, error) {
	var out GrowthChangeHistoryUpdateResp
	pattern := "/api/member/growthchangehistory/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/GrowthChangeHistoryUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) IntegrationChangeHistoryAdd(ctx context.Context, in *IntegrationChangeHistoryAddReq, opts ...http.CallOption) (*IntegrationChangeHistoryAddResp, error) {
	var out IntegrationChangeHistoryAddResp
	pattern := "/api/member/integrationchangehistory/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/IntegrationChangeHistoryAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) IntegrationChangeHistoryDelete(ctx context.Context, in *IntegrationChangeHistoryDeleteReq, opts ...http.CallOption) (*IntegrationChangeHistoryDeleteResp, error) {
	var out IntegrationChangeHistoryDeleteResp
	pattern := "/api/member/integrationchangehistory/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/IntegrationChangeHistoryDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) IntegrationChangeHistoryList(ctx context.Context, in *IntegrationChangeHistoryListReq, opts ...http.CallOption) (*IntegrationChangeHistoryListResp, error) {
	var out IntegrationChangeHistoryListResp
	pattern := "/api/member/integrationchangehistory/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/IntegrationChangeHistoryList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) IntegrationChangeHistoryUpdate(ctx context.Context, in *IntegrationChangeHistoryUpdateReq, opts ...http.CallOption) (*IntegrationChangeHistoryUpdateResp, error) {
	var out IntegrationChangeHistoryUpdateResp
	pattern := "/api/member/integrationchangehistory/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/IntegrationChangeHistoryUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) IntegrationConsumeSettingAdd(ctx context.Context, in *IntegrationConsumeSettingAddReq, opts ...http.CallOption) (*IntegrationConsumeSettingAddResp, error) {
	var out IntegrationConsumeSettingAddResp
	pattern := "/api/member/integrationconsumesetting/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/IntegrationConsumeSettingAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) IntegrationConsumeSettingDelete(ctx context.Context, in *IntegrationConsumeSettingDeleteReq, opts ...http.CallOption) (*IntegrationConsumeSettingDeleteResp, error) {
	var out IntegrationConsumeSettingDeleteResp
	pattern := "/api/member/integrationconsumesetting/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/IntegrationConsumeSettingDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) IntegrationConsumeSettingList(ctx context.Context, in *IntegrationConsumeSettingListReq, opts ...http.CallOption) (*IntegrationConsumeSettingListResp, error) {
	var out IntegrationConsumeSettingListResp
	pattern := "/api/member/integrationconsumesetting/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/IntegrationConsumeSettingList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) IntegrationConsumeSettingUpdate(ctx context.Context, in *IntegrationConsumeSettingUpdateReq, opts ...http.CallOption) (*IntegrationConsumeSettingUpdateResp, error) {
	var out IntegrationConsumeSettingUpdateResp
	pattern := "/api/member/integrationconsumesetting/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/IntegrationConsumeSettingUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberAdd(ctx context.Context, in *MemberAddReq, opts ...http.CallOption) (*MemberAddResp, error) {
	var out MemberAddResp
	pattern := "/api/member/member/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberDelete(ctx context.Context, in *MemberDeleteReq, opts ...http.CallOption) (*MemberDeleteResp, error) {
	var out MemberDeleteResp
	pattern := "/api/member/member/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberLevelAdd(ctx context.Context, in *MemberLevelAddReq, opts ...http.CallOption) (*MemberLevelAddResp, error) {
	var out MemberLevelAddResp
	pattern := "/api/member/level/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberLevelAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberLevelDelete(ctx context.Context, in *MemberLevelDeleteReq, opts ...http.CallOption) (*MemberLevelDeleteResp, error) {
	var out MemberLevelDeleteResp
	pattern := "/api/member/level/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberLevelDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberLevelList(ctx context.Context, in *MemberLevelListReq, opts ...http.CallOption) (*MemberLevelListResp, error) {
	var out MemberLevelListResp
	pattern := "/api/member/level/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberLevelList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberLevelUpdate(ctx context.Context, in *MemberLevelUpdateReq, opts ...http.CallOption) (*MemberLevelUpdateResp, error) {
	var out MemberLevelUpdateResp
	pattern := "/api/member/level/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberLevelUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberList(ctx context.Context, in *MemberListReq, opts ...http.CallOption) (*MemberListResp, error) {
	var out MemberListResp
	pattern := "/api/member/member/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberLoginLogAdd(ctx context.Context, in *MemberLoginLogAddReq, opts ...http.CallOption) (*MemberLoginLogAddResp, error) {
	var out MemberLoginLogAddResp
	pattern := "/api/member/loginlog/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberLoginLogAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberLoginLogDelete(ctx context.Context, in *MemberLoginLogDeleteReq, opts ...http.CallOption) (*MemberLoginLogDeleteResp, error) {
	var out MemberLoginLogDeleteResp
	pattern := "/api/member/loginlog/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberLoginLogDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberLoginLogList(ctx context.Context, in *MemberLoginLogListReq, opts ...http.CallOption) (*MemberLoginLogListResp, error) {
	var out MemberLoginLogListResp
	pattern := "/api/member/loginlog/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberLoginLogList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberLoginLogUpdate(ctx context.Context, in *MemberLoginLogUpdateReq, opts ...http.CallOption) (*MemberLoginLogUpdateResp, error) {
	var out MemberLoginLogUpdateResp
	pattern := "/api/member/loginlog/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberLoginLogUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberReceiveAddressAdd(ctx context.Context, in *MemberReceiveAddressAddReq, opts ...http.CallOption) (*MemberReceiveAddressAddResp, error) {
	var out MemberReceiveAddressAddResp
	pattern := "/api/member/address/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberReceiveAddressAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberReceiveAddressDelete(ctx context.Context, in *MemberReceiveAddressDeleteReq, opts ...http.CallOption) (*MemberReceiveAddressDeleteResp, error) {
	var out MemberReceiveAddressDeleteResp
	pattern := "/api/member/address/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberReceiveAddressDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberReceiveAddressList(ctx context.Context, in *MemberReceiveAddressListReq, opts ...http.CallOption) (*MemberReceiveAddressListResp, error) {
	var out MemberReceiveAddressListResp
	pattern := "/api/member/address/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberReceiveAddressList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberReceiveAddressUpdate(ctx context.Context, in *MemberReceiveAddressUpdateReq, opts ...http.CallOption) (*MemberReceiveAddressUpdateResp, error) {
	var out MemberReceiveAddressUpdateResp
	pattern := "/api/member/address/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberReceiveAddressUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberRuleSettingAdd(ctx context.Context, in *MemberRuleSettingAddReq, opts ...http.CallOption) (*MemberRuleSettingAddResp, error) {
	var out MemberRuleSettingAddResp
	pattern := "/api/member/rulesetting/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberRuleSettingAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberRuleSettingDelete(ctx context.Context, in *MemberRuleSettingDeleteReq, opts ...http.CallOption) (*MemberRuleSettingDeleteResp, error) {
	var out MemberRuleSettingDeleteResp
	pattern := "/api/member/rulesetting/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberRuleSettingDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberRuleSettingList(ctx context.Context, in *MemberRuleSettingListReq, opts ...http.CallOption) (*MemberRuleSettingListResp, error) {
	var out MemberRuleSettingListResp
	pattern := "/api/member/rulesetting/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberRuleSettingList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberRuleSettingUpdate(ctx context.Context, in *MemberRuleSettingUpdateReq, opts ...http.CallOption) (*MemberRuleSettingUpdateResp, error) {
	var out MemberRuleSettingUpdateResp
	pattern := "/api/member/rulesetting/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberRuleSettingUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberStatisticsInfoAdd(ctx context.Context, in *MemberStatisticsInfoAddReq, opts ...http.CallOption) (*MemberStatisticsInfoAddResp, error) {
	var out MemberStatisticsInfoAddResp
	pattern := "/api/member/statistics/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberStatisticsInfoAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberStatisticsInfoDelete(ctx context.Context, in *MemberStatisticsInfoDeleteReq, opts ...http.CallOption) (*MemberStatisticsInfoDeleteResp, error) {
	var out MemberStatisticsInfoDeleteResp
	pattern := "/api/member/statistics/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberStatisticsInfoDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberStatisticsInfoList(ctx context.Context, in *MemberStatisticsInfoListReq, opts ...http.CallOption) (*MemberStatisticsInfoListResp, error) {
	var out MemberStatisticsInfoListResp
	pattern := "/api/member/statistics/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberStatisticsInfoList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberStatisticsInfoUpdate(ctx context.Context, in *MemberStatisticsInfoUpdateReq, opts ...http.CallOption) (*MemberStatisticsInfoUpdateResp, error) {
	var out MemberStatisticsInfoUpdateResp
	pattern := "/api/member/statistics/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberStatisticsInfoUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberTagAdd(ctx context.Context, in *MemberTagAddReq, opts ...http.CallOption) (*MemberTagAddResp, error) {
	var out MemberTagAddResp
	pattern := "/api/member/tag/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberTagAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberTagDelete(ctx context.Context, in *MemberTagDeleteReq, opts ...http.CallOption) (*MemberTagDeleteResp, error) {
	var out MemberTagDeleteResp
	pattern := "/api/member/tag/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberTagDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberTagList(ctx context.Context, in *MemberTagListReq, opts ...http.CallOption) (*MemberTagListResp, error) {
	var out MemberTagListResp
	pattern := "/api/member/tag/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberTagList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberTagUpdate(ctx context.Context, in *MemberTagUpdateReq, opts ...http.CallOption) (*MemberTagUpdateResp, error) {
	var out MemberTagUpdateResp
	pattern := "/api/member/tag/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberTagUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberTaskAdd(ctx context.Context, in *MemberTaskAddReq, opts ...http.CallOption) (*MemberTaskAddResp, error) {
	var out MemberTaskAddResp
	pattern := "/api/member/task/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberTaskAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberTaskDelete(ctx context.Context, in *MemberTaskDeleteReq, opts ...http.CallOption) (*MemberTaskDeleteResp, error) {
	var out MemberTaskDeleteResp
	pattern := "/api/member/task/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberTaskDelete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberTaskList(ctx context.Context, in *MemberTaskListReq, opts ...http.CallOption) (*MemberTaskListResp, error) {
	var out MemberTaskListResp
	pattern := "/api/member/task/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberTaskList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberTaskUpdate(ctx context.Context, in *MemberTaskUpdateReq, opts ...http.CallOption) (*MemberTaskUpdateResp, error) {
	var out MemberTaskUpdateResp
	pattern := "/api/member/task/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberTaskUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) MemberUpdate(ctx context.Context, in *MemberUpdateReq, opts ...http.CallOption) (*MemberUpdateResp, error) {
	var out MemberUpdateResp
	pattern := "/api/member/member/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/front.admin.v1.Ums/MemberUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
